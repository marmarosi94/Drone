
drone_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080070b8  080070b8  000080b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007314  08007314  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007314  08007314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800731c  0800731c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0000831c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007320  08007320  00008320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007324  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          000007c0  2000005c  2000005c  0000905c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000081c  2000081c  0000905c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d19  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000265c  00000000  00000000  0001bda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0001e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d27  00000000  00000000  0001f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e6cf  00000000  00000000  000201df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015185  00000000  00000000  0003e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8af1  00000000  00000000  00053a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c524  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c10  00000000  00000000  0010c568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00111178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070a0 	.word	0x080070a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080070a0 	.word	0x080070a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 fe94 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f81e 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f950 	bl	8000530 <MX_GPIO_Init>
  MX_DMA_Init();
 8000290:	f000 f918 	bl	80004c4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000294:	f000 f8e6 	bl	8000464 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000298:	f000 f86e 	bl	8000378 <MX_I2C1_Init>
  MX_TIM6_Init();
 800029c:	f000 f8ac 	bl	80003f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80002a0:	4807      	ldr	r0, [pc, #28]	@ (80002c0 <main+0x40>)
 80002a2:	f004 febf 	bl	8005024 <HAL_TIM_Base_Start_IT>
  debug_print("Wizard booted!!!\r\n");
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <main+0x44>)
 80002a8:	f000 fa72 	bl	8000790 <debug_print>
  IMU_Init();
 80002ac:	f000 f964 	bl	8000578 <IMU_Init>

    /* USER CODE BEGIN 3 */
	  //sprintf(str_tmp, "ACCEL_X:0\r\n");
	  //USART1_Transmit_DMA(str_tmp, strlen(str_tmp));

	  IMU_Read_Accel_Gyro();
 80002b0:	f000 f9de 	bl	8000670 <IMU_Read_Accel_Gyro>
	  delay(10);
 80002b4:	200a      	movs	r0, #10
 80002b6:	f000 fbd5 	bl	8000a64 <delay>
	  IMU_Read_Accel_Gyro();
 80002ba:	bf00      	nop
 80002bc:	e7f8      	b.n	80002b0 <main+0x30>
 80002be:	bf00      	nop
 80002c0:	20000570 	.word	0x20000570
 80002c4:	080070b8 	.word	0x080070b8

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b09e      	sub	sp, #120	@ 0x78
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002d2:	2228      	movs	r2, #40	@ 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f006 fa64 	bl	80067a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	223c      	movs	r2, #60	@ 0x3c
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f006 fa56 	bl	80067a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f8:	2302      	movs	r3, #2
 80002fa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000300:	2310      	movs	r3, #16
 8000302:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000308:	2300      	movs	r3, #0
 800030a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800030c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000310:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fa5e 	bl	80037d8 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000322:	f000 fbb4 	bl	8000a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fa56 	bl	80047f4 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800034e:	f000 fb9e 	bl	8000a8e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000352:	2321      	movs	r3, #33	@ 0x21
 8000354:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000356:	2300      	movs	r3, #0
 8000358:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035e:	463b      	mov	r3, r7
 8000360:	4618      	mov	r0, r3
 8000362:	f004 fc59 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800036c:	f000 fb8f 	bl	8000a8e <Error_Handler>
  }
}
 8000370:	bf00      	nop
 8000372:	3778      	adds	r7, #120	@ 0x78
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}

08000378 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800037c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_I2C1_Init+0x74>)
 800037e:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <MX_I2C1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000384:	4a1b      	ldr	r2, [pc, #108]	@ (80003f4 <MX_I2C1_Init+0x7c>)
 8000386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000388:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_I2C1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000390:	2201      	movs	r2, #1
 8000392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000394:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_I2C1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003a6:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003b2:	480e      	ldr	r0, [pc, #56]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003b4:	f001 fb4e 	bl	8001a54 <HAL_I2C_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003be:	f000 fb66 	bl	8000a8e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4809      	ldr	r0, [pc, #36]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003c6:	f003 f96f 	bl	80036a8 <HAL_I2CEx_ConfigAnalogFilter>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003d0:	f000 fb5d 	bl	8000a8e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003d4:	2100      	movs	r1, #0
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <MX_I2C1_Init+0x74>)
 80003d8:	f003 f9b1 	bl	800373e <HAL_I2CEx_ConfigDigitalFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003e2:	f000 fb54 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000494 	.word	0x20000494
 80003f0:	40005400 	.word	0x40005400
 80003f4:	0010020a 	.word	0x0010020a

080003f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000408:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_TIM6_Init+0x64>)
 800040a:	4a15      	ldr	r2, [pc, #84]	@ (8000460 <MX_TIM6_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6400;
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <MX_TIM6_Init+0x64>)
 8000410:	f44f 52c8 	mov.w	r2, #6400	@ 0x1900
 8000414:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000416:	4b11      	ldr	r3, [pc, #68]	@ (800045c <MX_TIM6_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_TIM6_Init+0x64>)
 800041e:	220a      	movs	r2, #10
 8000420:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000422:	4b0e      	ldr	r3, [pc, #56]	@ (800045c <MX_TIM6_Init+0x64>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <MX_TIM6_Init+0x64>)
 800042a:	f004 fda3 	bl	8004f74 <HAL_TIM_Base_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000434:	f000 fb2b 	bl	8000a8e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	@ (800045c <MX_TIM6_Init+0x64>)
 8000446:	f005 f827 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000450:	f000 fb1d 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000570 	.word	0x20000570
 8000460:	40001000 	.word	0x40001000

08000464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000468:	4b14      	ldr	r3, [pc, #80]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <MX_USART1_UART_Init+0x5c>)
 800046c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 8000470:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000476:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800047c:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000482:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 800048a:	220c      	movs	r2, #12
 800048c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000494:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 8000496:	2200      	movs	r2, #0
 8000498:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	@ (80004bc <MX_USART1_UART_Init+0x58>)
 80004a8:	f005 f894 	bl	80055d4 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004b2:	f000 faec 	bl	8000a8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	200005bc 	.word	0x200005bc
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_DMA_Init+0x68>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a17      	ldr	r2, [pc, #92]	@ (800052c <MX_DMA_Init+0x68>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_DMA_Init+0x68>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	200e      	movs	r0, #14
 80004e8:	f000 fec7 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004ec:	200e      	movs	r0, #14
 80004ee:	f000 fee0 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200f      	movs	r0, #15
 80004f8:	f000 febf 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004fc:	200f      	movs	r0, #15
 80004fe:	f000 fed8 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2010      	movs	r0, #16
 8000508:	f000 feb7 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800050c:	2010      	movs	r0, #16
 800050e:	f000 fed0 	bl	80012b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	2011      	movs	r0, #17
 8000518:	f000 feaf 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800051c:	2011      	movs	r0, #17
 800051e:	f000 fec8 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <MX_GPIO_Init+0x44>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <MX_GPIO_Init+0x44>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_GPIO_Init+0x44>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_GPIO_Init+0x44>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a08      	ldr	r2, [pc, #32]	@ (8000574 <MX_GPIO_Init+0x44>)
 8000554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_GPIO_Init+0x44>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <IMU_Init>:

/* USER CODE BEGIN 4 */
// Function to initialize the IMU
// Function to initialize the IMU
void IMU_Init(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	@ 0x58
 800057c:	af00      	add	r7, sp, #0
    uint8_t data[2];
    char str[64];

    // Wake up MPU6050 (write 0x00 to PWR_MGMT_1 register)
    data[0] = 0x00;   // Value to wake up the IMU
 800057e:	2300      	movs	r3, #0
 8000580:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    if (I2C_Write_DMA(IMU_I2C_ADDRESS, 0x6B, data, 1) != HAL_OK) {
 8000584:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000588:	2301      	movs	r3, #1
 800058a:	216b      	movs	r1, #107	@ 0x6b
 800058c:	20d0      	movs	r0, #208	@ 0xd0
 800058e:	f000 f9ef 	bl	8000970 <I2C_Write_DMA>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d003      	beq.n	80005a0 <IMU_Init+0x28>
        debug_print("Error: Failed to wake up IMU\r\n");
 8000598:	482f      	ldr	r0, [pc, #188]	@ (8000658 <IMU_Init+0xe0>)
 800059a:	f000 f8f9 	bl	8000790 <debug_print>
        return;  // Exit if I2C write failed
 800059e:	e058      	b.n	8000652 <IMU_Init+0xda>
    }

    delay(100);  // Need 100ms after the reset for the IMU
 80005a0:	2064      	movs	r0, #100	@ 0x64
 80005a2:	f000 fa5f 	bl	8000a64 <delay>

    uint8_t i = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    uint32_t start_time = get_millis();
 80005ac:	f000 fa4e 	bl	8000a4c <get_millis>
 80005b0:	6538      	str	r0, [r7, #80]	@ 0x50
    uint32_t timeout_duration = 1000;  // Timeout after 1000 ms (1 second)
 80005b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t retry_delay = 50;  // Delay between retry attempts (in ms)
 80005b8:	2332      	movs	r3, #50	@ 0x32
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Loop through retry attempts for IMU detection, prioritizing retries
    while (i < 10) {  // Max 10 attempts, retry-focused
 80005bc:	e042      	b.n	8000644 <IMU_Init+0xcc>
        // Clear the DMA completion flag before starting a new read
        dma_read_complete = 0;
 80005be:	4b27      	ldr	r3, [pc, #156]	@ (800065c <IMU_Init+0xe4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

        // Start I2C read with DMA (non-blocking call)
        I2C_Read_DMA(IMU_I2C_ADDRESS, 0x75, data, 1);
 80005c4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80005c8:	2301      	movs	r3, #1
 80005ca:	2175      	movs	r1, #117	@ 0x75
 80005cc:	20d0      	movs	r0, #208	@ 0xd0
 80005ce:	f000 f9ef 	bl	80009b0 <I2C_Read_DMA>

        // Wait for DMA read to complete with timeout logic
        uint32_t wait_start_time = get_millis();
 80005d2:	f000 fa3b 	bl	8000a4c <get_millis>
 80005d6:	6478      	str	r0, [r7, #68]	@ 0x44
        while (!dma_read_complete) {
 80005d8:	e013      	b.n	8000602 <IMU_Init+0x8a>
            // If the overall timeout period has passed, exit with an error
            if (get_millis() - start_time > timeout_duration) {
 80005da:	f000 fa37 	bl	8000a4c <get_millis>
 80005de:	4602      	mov	r2, r0
 80005e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d203      	bcs.n	80005f2 <IMU_Init+0x7a>
                debug_print("Error: IMU not responding within timeout period\r\n");
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <IMU_Init+0xe8>)
 80005ec:	f000 f8d0 	bl	8000790 <debug_print>
                return;  // Exit if overall timeout has been exceeded
 80005f0:	e02f      	b.n	8000652 <IMU_Init+0xda>
            }

            // If retry delay threshold has passed, break the inner loop and retry
            if (get_millis() - wait_start_time > retry_delay) {
 80005f2:	f000 fa2b 	bl	8000a4c <get_millis>
 80005f6:	4602      	mov	r2, r0
 80005f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80005fe:	429a      	cmp	r2, r3
 8000600:	d304      	bcc.n	800060c <IMU_Init+0x94>
        while (!dma_read_complete) {
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <IMU_Init+0xe4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0e7      	beq.n	80005da <IMU_Init+0x62>
 800060a:	e000      	b.n	800060e <IMU_Init+0x96>
                break;  // Exit the current wait loop and try again
 800060c:	bf00      	nop
            }
        }

        // Check if the IMU is responding correctly (should return 0x68)
        if (data[0] == 0x68) {
 800060e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000612:	2b68      	cmp	r3, #104	@ 0x68
 8000614:	d103      	bne.n	800061e <IMU_Init+0xa6>
            debug_print("IMU FOUND!\r\n");
 8000616:	4813      	ldr	r0, [pc, #76]	@ (8000664 <IMU_Init+0xec>)
 8000618:	f000 f8ba 	bl	8000790 <debug_print>
            return;  // Successfully found the IMU, exit the function
 800061c:	e019      	b.n	8000652 <IMU_Init+0xda>
        } else {
            sprintf(str, "IMU NOT found, attempt %d\r\n", i);
 800061e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000622:	463b      	mov	r3, r7
 8000624:	4910      	ldr	r1, [pc, #64]	@ (8000668 <IMU_Init+0xf0>)
 8000626:	4618      	mov	r0, r3
 8000628:	f006 f89a 	bl	8006760 <siprintf>
            debug_print(str);  // Print attempt message
 800062c:	463b      	mov	r3, r7
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f8ae 	bl	8000790 <debug_print>
        }

        // Increment retry attempt
        i++;
 8000634:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000638:	3301      	adds	r3, #1
 800063a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        // Add a small delay before retrying (to prevent hammering)
        HAL_Delay(10);  // 10 ms delay between retries (can be adjusted)
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fd1c 	bl	800107c <HAL_Delay>
    while (i < 10) {  // Max 10 attempts, retry-focused
 8000644:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000648:	2b09      	cmp	r3, #9
 800064a:	d9b8      	bls.n	80005be <IMU_Init+0x46>
    }

    // If we exit the loop without finding the IMU, handle the timeout
    debug_print("Error: IMU search exceeded maximum attempts\r\n");
 800064c:	4807      	ldr	r0, [pc, #28]	@ (800066c <IMU_Init+0xf4>)
 800064e:	f000 f89f 	bl	8000790 <debug_print>
}
 8000652:	3758      	adds	r7, #88	@ 0x58
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	080070cc 	.word	0x080070cc
 800065c:	20000481 	.word	0x20000481
 8000660:	080070ec 	.word	0x080070ec
 8000664:	08007120 	.word	0x08007120
 8000668:	08007130 	.word	0x08007130
 800066c:	0800714c 	.word	0x0800714c

08000670 <IMU_Read_Accel_Gyro>:
    // Print confirmation
    debug_print("MPU-6050 configured for fastest mode with low-pass filter disabled\r\n");
}

// Function to read accelerometer and gyroscope data
void IMU_Read_Accel_Gyro(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b098      	sub	sp, #96	@ 0x60
 8000674:	af02      	add	r7, sp, #8
    char str[64];

    // Start I2C read with DMA for accelerometer and gyroscope data (14 bytes)
    I2C_Read_DMA(IMU_I2C_ADDRESS, 0x3B, imu_data, 14);
 8000676:	230e      	movs	r3, #14
 8000678:	4a40      	ldr	r2, [pc, #256]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 800067a:	213b      	movs	r1, #59	@ 0x3b
 800067c:	20d0      	movs	r0, #208	@ 0xd0
 800067e:	f000 f997 	bl	80009b0 <I2C_Read_DMA>

    // Wait for DMA read to complete with timeout logic
    uint32_t wait_start_time = get_millis();
 8000682:	f000 f9e3 	bl	8000a4c <get_millis>
 8000686:	6578      	str	r0, [r7, #84]	@ 0x54
    uint32_t timeout_duration = 1000;  // Timeout duration for reading (in ms)
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	653b      	str	r3, [r7, #80]	@ 0x50

    // Wait for DMA transfer to complete or timeout
    while (!dma_read_complete) {
 800068e:	e00b      	b.n	80006a8 <IMU_Read_Accel_Gyro+0x38>
        if (get_millis() - wait_start_time > timeout_duration) {
 8000690:	f000 f9dc 	bl	8000a4c <get_millis>
 8000694:	4602      	mov	r2, r0
 8000696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800069c:	429a      	cmp	r2, r3
 800069e:	d203      	bcs.n	80006a8 <IMU_Read_Accel_Gyro+0x38>
            debug_print("Error: DMA read timeout\r\n");
 80006a0:	4837      	ldr	r0, [pc, #220]	@ (8000780 <IMU_Read_Accel_Gyro+0x110>)
 80006a2:	f000 f875 	bl	8000790 <debug_print>
 80006a6:	e065      	b.n	8000774 <IMU_Read_Accel_Gyro+0x104>
    while (!dma_read_complete) {
 80006a8:	4b36      	ldr	r3, [pc, #216]	@ (8000784 <IMU_Read_Accel_Gyro+0x114>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0ef      	beq.n	8000690 <IMU_Read_Accel_Gyro+0x20>
            return;  // Exit if the read operation times out
        }
    }

    // Process accelerometer data
    int16_t accel_x = (int16_t)((imu_data[0] << 8) | imu_data[1]);
 80006b0:	4b32      	ldr	r3, [pc, #200]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b30      	ldr	r3, [pc, #192]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	b21b      	sxth	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    int16_t accel_y = (int16_t)((imu_data[2] << 8) | imu_data[3]);
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006d2:	78db      	ldrb	r3, [r3, #3]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    int16_t accel_z = (int16_t)((imu_data[4] << 8) | imu_data[5]);
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Process gyroscope data
    int16_t gyro_x = (int16_t)((imu_data[8] << 8) | imu_data[9]);
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b21a      	sxth	r2, r3
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 80006fe:	7a5b      	ldrb	r3, [r3, #9]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    int16_t gyro_y = (int16_t)((imu_data[10] << 8) | imu_data[11]);
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 800070a:	7a9b      	ldrb	r3, [r3, #10]
 800070c:	b21b      	sxth	r3, r3
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 8000714:	7adb      	ldrb	r3, [r3, #11]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    int16_t gyro_z = (int16_t)((imu_data[12] << 8) | imu_data[13]);
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 8000720:	7b1b      	ldrb	r3, [r3, #12]
 8000722:	b21b      	sxth	r3, r3
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <IMU_Read_Accel_Gyro+0x10c>)
 800072a:	7b5b      	ldrb	r3, [r3, #13]
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    // Print gyroscope data with padding to clear leftovers
    sprintf(str, "\033[2;1HGyro X: %d, Y: %d, Z: %d       ", gyro_x, gyro_y, gyro_z);
    debug_print(str);*/

    // Print accelerometer data with padding to clear leftovers
    sprintf(str, "AccelX:%d, Y:%d, Z:%d", accel_x, accel_y, accel_z);
 8000734:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8000738:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	@ 0x4c
 800073c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8000740:	1d38      	adds	r0, r7, #4
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	460b      	mov	r3, r1
 8000746:	4910      	ldr	r1, [pc, #64]	@ (8000788 <IMU_Read_Accel_Gyro+0x118>)
 8000748:	f006 f80a 	bl	8006760 <siprintf>
    debug_print(str);
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f81e 	bl	8000790 <debug_print>

    // Print gyroscope data with padding to clear leftovers
    sprintf(str, "GyroX:%d, Y:%d, Z:%d", gyro_x, gyro_y, gyro_z);
 8000754:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8000758:	f9b7 1046 	ldrsh.w	r1, [r7, #70]	@ 0x46
 800075c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8000760:	1d38      	adds	r0, r7, #4
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	460b      	mov	r3, r1
 8000766:	4909      	ldr	r1, [pc, #36]	@ (800078c <IMU_Read_Accel_Gyro+0x11c>)
 8000768:	f005 fffa 	bl	8006760 <siprintf>
    debug_print(str);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f80e 	bl	8000790 <debug_print>
}
 8000774:	3758      	adds	r7, #88	@ 0x58
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000484 	.word	0x20000484
 8000780:	0800725c 	.word	0x0800725c
 8000784:	20000481 	.word	0x20000481
 8000788:	08007278 	.word	0x08007278
 800078c:	08007290 	.word	0x08007290

08000790 <debug_print>:

void debug_print(char* str){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	USART1_Transmit_DMA(str, strlen(str));
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fd19 	bl	80001d0 <strlen>
 800079e:	4603      	mov	r3, r0
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f805 	bl	80007b4 <USART1_Transmit_DMA>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <USART1_Transmit_DMA>:

void USART1_Transmit_DMA(char *data, uint16_t size) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
    if (size == 0) return;  // Ignore empty data (nothing to transmit)
 80007c0:	887b      	ldrh	r3, [r7, #2]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d077      	beq.n	80008b6 <USART1_Transmit_DMA+0x102>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c6:	b672      	cpsid	i
}
 80007c8:	bf00      	nop

    __disable_irq();  // Prevent race conditions

    // Calculate available free space in the buffer
    uint16_t freeSpace = (txReadIndex > txWriteIndex) ?
 80007ca:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d90a      	bls.n	80007f0 <USART1_Transmit_DMA+0x3c>
                         (txReadIndex - txWriteIndex - 1) :  					// Buffer space available when read index is ahead of write index
 80007da:	4b39      	ldr	r3, [pc, #228]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b38      	ldr	r3, [pc, #224]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b29b      	uxth	r3, r3
    uint16_t freeSpace = (txReadIndex > txWriteIndex) ?
 80007ea:	3b01      	subs	r3, #1
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	e00a      	b.n	8000806 <USART1_Transmit_DMA+0x52>
                         ((UART_TX_BUFFER_SIZE - txWriteIndex) + txReadIndex - 1);  	// Buffer space available when write index has wrapped
 80007f0:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b29b      	uxth	r3, r3
    uint16_t freeSpace = (txReadIndex > txWriteIndex) ?
 8000800:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8000804:	b29b      	uxth	r3, r3
 8000806:	81bb      	strh	r3, [r7, #12]

    // Limit the size to the available free space
    if (size > freeSpace) {
 8000808:	887a      	ldrh	r2, [r7, #2]
 800080a:	89bb      	ldrh	r3, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d901      	bls.n	8000814 <USART1_Transmit_DMA+0x60>
        size = freeSpace;  // Drop excess characters
 8000810:	89bb      	ldrh	r3, [r7, #12]
 8000812:	807b      	strh	r3, [r7, #2]
    }

    // Copy only the allowed size into the buffer
    for (uint16_t i = 0; i < size; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	81fb      	strh	r3, [r7, #14]
 8000818:	e019      	b.n	800084e <USART1_Transmit_DMA+0x9a>
        uart1_txBuffer[txWriteIndex] = data[i];  								// Copy data into the buffer
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	4413      	add	r3, r2
 8000820:	4a28      	ldr	r2, [pc, #160]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	b292      	uxth	r2, r2
 8000826:	7819      	ldrb	r1, [r3, #0]
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <USART1_Transmit_DMA+0x114>)
 800082a:	5499      	strb	r1, [r3, r2]
        txWriteIndex = (txWriteIndex + 1) % UART_TX_BUFFER_SIZE;  					// Move write pointer circularly
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	425a      	negs	r2, r3
 8000836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800083a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800083e:	bf58      	it	pl
 8000840:	4253      	negpl	r3, r2
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 8000846:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	3301      	adds	r3, #1
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	89fa      	ldrh	r2, [r7, #14]
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	429a      	cmp	r2, r3
 8000854:	d3e1      	bcc.n	800081a <USART1_Transmit_DMA+0x66>
    }

    // Start transmission if not already in progress
    if (!txBusy && size > 0) {
 8000856:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <USART1_Transmit_DMA+0x118>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d128      	bne.n	80008b2 <USART1_Transmit_DMA+0xfe>
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d025      	beq.n	80008b2 <USART1_Transmit_DMA+0xfe>
        txBusy = 1;  // Mark that transmission is in progress
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <USART1_Transmit_DMA+0x118>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]

        // Calculate the chunk size that needs to be sent (based on available data)
        uint16_t chunkSize = (txWriteIndex >= txReadIndex) ?
 800086c:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	b29b      	uxth	r3, r3
 8000878:	429a      	cmp	r2, r3
 800087a:	d308      	bcc.n	800088e <USART1_Transmit_DMA+0xda>
                             (txWriteIndex - txReadIndex) :  					// If data is in one chunk
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <USART1_Transmit_DMA+0x110>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29a      	uxth	r2, r3
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29b      	uxth	r3, r3
        uint16_t chunkSize = (txWriteIndex >= txReadIndex) ?
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	e005      	b.n	800089a <USART1_Transmit_DMA+0xe6>
                             (UART_TX_BUFFER_SIZE - txReadIndex); 					// If data is split across buffer boundary
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
        uint16_t chunkSize = (txWriteIndex >= txReadIndex) ?
 8000894:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000898:	b29b      	uxth	r3, r3
 800089a:	817b      	strh	r3, [r7, #10]

        HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&uart1_txBuffer[txReadIndex], chunkSize);  	// Start DMA transmission
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <USART1_Transmit_DMA+0x10c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <USART1_Transmit_DMA+0x114>)
 80008a6:	4413      	add	r3, r2
 80008a8:	897a      	ldrh	r2, [r7, #10]
 80008aa:	4619      	mov	r1, r3
 80008ac:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <USART1_Transmit_DMA+0x11c>)
 80008ae:	f004 fedf 	bl	8005670 <HAL_UART_Transmit_DMA>
  __ASM volatile ("cpsie i" : : : "memory");
 80008b2:	b662      	cpsie	i
}
 80008b4:	e000      	b.n	80008b8 <USART1_Transmit_DMA+0x104>
    if (size == 0) return;  // Ignore empty data (nothing to transmit)
 80008b6:	bf00      	nop
    }

    __enable_irq();  															// Re-enable interrupts
}
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000047e 	.word	0x2000047e
 80008c4:	2000047c 	.word	0x2000047c
 80008c8:	2000007c 	.word	0x2000007c
 80008cc:	20000480 	.word	0x20000480
 80008d0:	200005bc 	.word	0x200005bc

080008d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    //if (huart->Instance == USART1) {  // Check if the callback is for USART1
        // Update txReadIndex to point to the next byte to be transmitted
        txReadIndex = (txReadIndex + huart->TxXferSize) % UART_TX_BUFFER_SIZE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80008e2:	4b1e      	ldr	r3, [pc, #120]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 80008f4:	801a      	strh	r2, [r3, #0]

        // If there's more data to transmit, continue the transmission
        if (txReadIndex != txWriteIndex) {
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_UART_TxCpltCallback+0x8c>)
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	429a      	cmp	r2, r3
 8000904:	d023      	beq.n	800094e <HAL_UART_TxCpltCallback+0x7a>
            // Calculate the chunk size (remaining data to send)
            uint16_t chunkSize = (txWriteIndex > txReadIndex) ?
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_UART_TxCpltCallback+0x8c>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b13      	ldr	r3, [pc, #76]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	429a      	cmp	r2, r3
 8000914:	d908      	bls.n	8000928 <HAL_UART_TxCpltCallback+0x54>
                                 (txWriteIndex - txReadIndex) :  // Data is in one chunk
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_UART_TxCpltCallback+0x8c>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	b29a      	uxth	r2, r3
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
            uint16_t chunkSize = (txWriteIndex > txReadIndex) ?
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	b29b      	uxth	r3, r3
 8000926:	e005      	b.n	8000934 <HAL_UART_TxCpltCallback+0x60>
                                 (UART_TX_BUFFER_SIZE - txReadIndex);  // Data is split across the buffer
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	b29b      	uxth	r3, r3
            uint16_t chunkSize = (txWriteIndex > txReadIndex) ?
 800092e:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000932:	b29b      	uxth	r3, r3
 8000934:	81fb      	strh	r3, [r7, #14]

            // Continue transmission using DMA
            HAL_UART_Transmit_DMA(&huart1, (uint8_t*)&uart1_txBuffer[txReadIndex], chunkSize);
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_UART_TxCpltCallback+0x88>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b29b      	uxth	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_UART_TxCpltCallback+0x90>)
 8000940:	4413      	add	r3, r2
 8000942:	89fa      	ldrh	r2, [r7, #14]
 8000944:	4619      	mov	r1, r3
 8000946:	4808      	ldr	r0, [pc, #32]	@ (8000968 <HAL_UART_TxCpltCallback+0x94>)
 8000948:	f004 fe92 	bl	8005670 <HAL_UART_Transmit_DMA>
        } else {
            // No more data to transmit, transmission is complete
            txBusy = 0;  // Mark the transmission as not busy
        }
    //}
}
 800094c:	e002      	b.n	8000954 <HAL_UART_TxCpltCallback+0x80>
            txBusy = 0;  // Mark the transmission as not busy
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <HAL_UART_TxCpltCallback+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000047e 	.word	0x2000047e
 8000960:	2000047c 	.word	0x2000047c
 8000964:	2000007c 	.word	0x2000007c
 8000968:	200005bc 	.word	0x200005bc
 800096c:	20000480 	.word	0x20000480

08000970 <I2C_Write_DMA>:

// Function to write data to the IMU register using I2C with DMA
HAL_StatusTypeDef I2C_Write_DMA(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t size) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af02      	add	r7, sp, #8
 8000976:	603a      	str	r2, [r7, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	460b      	mov	r3, r1
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	4613      	mov	r3, r2
 8000984:	80bb      	strh	r3, [r7, #4]
    // Send the register address followed by the data
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(&hi2c1, devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, data, size);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	b299      	uxth	r1, r3
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	b29a      	uxth	r2, r3
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	4804      	ldr	r0, [pc, #16]	@ (80009ac <I2C_Write_DMA+0x3c>)
 800099a:	f001 f8f7 	bl	8001b8c <HAL_I2C_Mem_Write_DMA>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
    return status;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000494 	.word	0x20000494

080009b0 <I2C_Read_DMA>:

// Function to read data from the IMU register using I2C with DMA
HAL_StatusTypeDef I2C_Read_DMA(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t size) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	603a      	str	r2, [r7, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	460b      	mov	r3, r1
 80009c0:	71bb      	strb	r3, [r7, #6]
 80009c2:	4613      	mov	r3, r2
 80009c4:	80bb      	strh	r3, [r7, #4]
    // Send the register address and then read the data
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(&hi2c1, devAddr, regAddr, I2C_MEMADD_SIZE_8BIT, data, size);
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	b299      	uxth	r1, r3
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <I2C_Read_DMA+0x3c>)
 80009da:	f001 f9bd 	bl	8001d58 <HAL_I2C_Mem_Read_DMA>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
    return status;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000494 	.word	0x20000494

080009f0 <HAL_I2C_MemRxCpltCallback>:


// DMA complete callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	  UNUSED(hi2c);
	// Set the flag to indicate that the DMA read operation is complete
    dma_read_complete = 1;
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <HAL_I2C_MemRxCpltCallback+0x1c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000481 	.word	0x20000481

08000a10 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
        // Handle transmit complete (DMA transfer completed)
    }
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
        // Handle receive complete (DMA transfer completed)
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
        // Handle errors (e.g., NACK, timeouts, etc.)
    }
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <get_millis>:

// Function to get the current time in milliseconds
uint32_t get_millis(void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
    return millis;
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <get_millis+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000078 	.word	0x20000078

08000a64 <delay>:

// Function to create a delay in milliseconds (blocking)
void delay(uint32_t ms) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
    uint32_t start = get_millis();
 8000a6c:	f7ff ffee 	bl	8000a4c <get_millis>
 8000a70:	60f8      	str	r0, [r7, #12]
    while (get_millis() - start < ms) {
 8000a72:	bf00      	nop
 8000a74:	f7ff ffea 	bl	8000a4c <get_millis>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <delay+0x10>
        // Wait for the desired amount of time to pass
    }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a92:	b672      	cpsid	i
}
 8000a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a96:	bf00      	nop
 8000a98:	e7fd      	b.n	8000a96 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6193      	str	r3, [r2, #24]
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_MspInit+0x44>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a45      	ldr	r2, [pc, #276]	@ (8000c18 <HAL_I2C_MspInit+0x134>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 8084 	bne.w	8000c10 <HAL_I2C_MspInit+0x12c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b08:	4b44      	ldr	r3, [pc, #272]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a43      	ldr	r2, [pc, #268]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b12:	6153      	str	r3, [r2, #20]
 8000b14:	4b41      	ldr	r3, [pc, #260]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b20:	23c0      	movs	r3, #192	@ 0xc0
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4839      	ldr	r0, [pc, #228]	@ (8000c20 <HAL_I2C_MspInit+0x13c>)
 8000b3c:	f000 fe10 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b40:	4b36      	ldr	r3, [pc, #216]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a35      	ldr	r2, [pc, #212]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b4a:	61d3      	str	r3, [r2, #28]
 8000b4c:	4b33      	ldr	r3, [pc, #204]	@ (8000c1c <HAL_I2C_MspInit+0x138>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000b58:	4b32      	ldr	r3, [pc, #200]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b5a:	4a33      	ldr	r2, [pc, #204]	@ (8000c28 <HAL_I2C_MspInit+0x144>)
 8000b5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b60:	2210      	movs	r2, #16
 8000b62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b88:	4826      	ldr	r0, [pc, #152]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b8a:	f000 fbac 	bl	80012e6 <HAL_DMA_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 8000b94:	f7ff ff7b 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000b9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b9e:	4a21      	ldr	r2, [pc, #132]	@ (8000c24 <HAL_I2C_MspInit+0x140>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000ba6:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <HAL_I2C_MspInit+0x14c>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bd4:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bd6:	f000 fb86 	bl	80012e6 <HAL_DMA_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_I2C_MspInit+0x100>
    {
      Error_Handler();
 8000be0:	f7ff ff55 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000be8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <HAL_I2C_MspInit+0x148>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	201f      	movs	r0, #31
 8000bf6:	f000 fb40 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bfa:	201f      	movs	r0, #31
 8000bfc:	f000 fb59 	bl	80012b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2020      	movs	r0, #32
 8000c06:	f000 fb38 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	f000 fb51 	bl	80012b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400
 8000c24:	200004e8 	.word	0x200004e8
 8000c28:	4002006c 	.word	0x4002006c
 8000c2c:	2000052c 	.word	0x2000052c
 8000c30:	40020080 	.word	0x40020080

08000c34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <HAL_TIM_Base_MspInit+0x44>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d113      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_TIM_Base_MspInit+0x48>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2036      	movs	r0, #54	@ 0x36
 8000c64:	f000 fb09 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c68:	2036      	movs	r0, #54	@ 0x36
 8000c6a:	f000 fb22 	bl	80012b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40001000 	.word	0x40001000
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a42      	ldr	r2, [pc, #264]	@ (8000da8 <HAL_UART_MspInit+0x128>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d17d      	bne.n	8000d9e <HAL_UART_MspInit+0x11e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca2:	4b42      	ldr	r3, [pc, #264]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a41      	ldr	r2, [pc, #260]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b3f      	ldr	r3, [pc, #252]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b3c      	ldr	r3, [pc, #240]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a3b      	ldr	r2, [pc, #236]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <HAL_UART_MspInit+0x12c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cd2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f000 fd35 	bl	8001760 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000db4 <HAL_UART_MspInit+0x134>)
 8000cfa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000cfe:	2210      	movs	r2, #16
 8000d00:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d08:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d0a:	2280      	movs	r2, #128	@ 0x80
 8000d0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0e:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d14:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d1a:	4b25      	ldr	r3, [pc, #148]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d20:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d26:	4822      	ldr	r0, [pc, #136]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d28:	f000 fadd 	bl	80012e6 <HAL_DMA_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000d32:	f7ff feac 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d3a:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000db0 <HAL_UART_MspInit+0x130>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d44:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <HAL_UART_MspInit+0x13c>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d74:	f000 fab7 	bl	80012e6 <HAL_DMA_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000d7e:	f7ff fe86 	bl	8000a8e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a0c      	ldr	r2, [pc, #48]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d86:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d88:	4a0b      	ldr	r2, [pc, #44]	@ (8000db8 <HAL_UART_MspInit+0x138>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2025      	movs	r0, #37	@ 0x25
 8000d94:	f000 fa71 	bl	800127a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d98:	2025      	movs	r0, #37	@ 0x25
 8000d9a:	f000 fa8a 	bl	80012b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	@ 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40013800 	.word	0x40013800
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000644 	.word	0x20000644
 8000db4:	40020044 	.word	0x40020044
 8000db8:	20000688 	.word	0x20000688
 8000dbc:	40020058 	.word	0x40020058

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e16:	f000 f911 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e24:	4802      	ldr	r0, [pc, #8]	@ (8000e30 <DMA1_Channel4_IRQHandler+0x10>)
 8000e26:	f000 fb80 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000644 	.word	0x20000644

08000e34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e38:	4802      	ldr	r0, [pc, #8]	@ (8000e44 <DMA1_Channel5_IRQHandler+0x10>)
 8000e3a:	f000 fb76 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000688 	.word	0x20000688

08000e48 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <DMA1_Channel6_IRQHandler+0x10>)
 8000e4e:	f000 fb6c 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200004e8 	.word	0x200004e8

08000e5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <DMA1_Channel7_IRQHandler+0x10>)
 8000e62:	f000 fb62 	bl	800152a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000052c 	.word	0x2000052c

08000e70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <I2C1_EV_IRQHandler+0x10>)
 8000e76:	f001 f855 	bl	8001f24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000494 	.word	0x20000494

08000e84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <I2C1_ER_IRQHandler+0x10>)
 8000e8a:	f001 f865 	bl	8001f58 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000494 	.word	0x20000494

08000e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <USART1_IRQHandler+0x10>)
 8000e9e:	f004 fc63 	bl	8005768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200005bc 	.word	0x200005bc

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <TIM6_DAC_IRQHandler+0x18>)
 8000eb2:	f004 f921 	bl	80050f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  millis++;  // Increment the millisecond counter
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <TIM6_DAC_IRQHandler+0x1c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a02      	ldr	r2, [pc, #8]	@ (8000ec8 <TIM6_DAC_IRQHandler+0x1c>)
 8000ebe:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000570 	.word	0x20000570
 8000ec8:	20000078 	.word	0x20000078

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f005 fc5a 	bl	80067b4 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000a000 	.word	0x2000a000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200006cc 	.word	0x200006cc
 8000f34:	20000820 	.word	0x20000820

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f60:	f7ff ffea 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f64:	480c      	ldr	r0, [pc, #48]	@ (8000f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f66:	490d      	ldr	r1, [pc, #52]	@ (8000f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <LoopForever+0xe>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa8 <LoopForever+0x16>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f005 fc19 	bl	80067c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8e:	f7ff f977 	bl	8000280 <main>

08000f92 <LoopForever>:

LoopForever:
    b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fa0:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8000fa4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa8:	2000081c 	.word	0x2000081c

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	@ (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f94f 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fd66 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f967 	bl	80012ce <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f92f 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	@ (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000
 8001034:	20000008 	.word	0x20000008
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	200006d0 	.word	0x200006d0

08001064 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;  
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	200006d0 	.word	0x200006d0

0800107c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e037      	b.n	800136c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001312:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001316:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f9ca 	bl	80016e8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_DMA_Start_IT+0x20>
 8001390:	2302      	movs	r3, #2
 8001392:	e04a      	b.n	800142a <HAL_DMA_Start_IT+0xb6>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d13a      	bne.n	800141c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 f95d 	bl	800168a <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 020e 	orr.w	r2, r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e00f      	b.n	800140a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 020a 	orr.w	r2, r2, #10
 80013f8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0204 	bic.w	r2, r2, #4
 8001408:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e005      	b.n	8001428 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001424:	2302      	movs	r3, #2
 8001426:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e02e      	b.n	80014a2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800144a:	2b02      	cmp	r3, #2
 800144c:	d008      	beq.n	8001460 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2204      	movs	r2, #4
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e020      	b.n	80014a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d005      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2204      	movs	r2, #4
 80014c8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e027      	b.n	8001520 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 020e 	bic.w	r2, r2, #14
 80014de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
    }
  }
  return status;
 8001520:	7bfb      	ldrb	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2204      	movs	r2, #4
 8001548:	409a      	lsls	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d024      	beq.n	800159c <HAL_DMA_IRQHandler+0x72>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01f      	beq.n	800159c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0204 	bic.w	r2, r2, #4
 8001578:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001582:	2104      	movs	r1, #4
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06a      	beq.n	8001668 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800159a:	e065      	b.n	8001668 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	2202      	movs	r2, #2
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d02c      	beq.n	8001606 <HAL_DMA_IRQHandler+0xdc>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d027      	beq.n	8001606 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020a 	bic.w	r2, r2, #10
 80015d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e4:	2102      	movs	r1, #2
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d035      	beq.n	8001668 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001604:	e030      	b.n	8001668 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	2208      	movs	r2, #8
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d028      	beq.n	8001668 <HAL_DMA_IRQHandler+0x13e>
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020e 	bic.w	r2, r2, #14
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
    }
  }
}
 8001666:	e7ff      	b.n	8001668 <HAL_DMA_IRQHandler+0x13e>
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f202 	lsl.w	r2, r1, r2
 80016a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d108      	bne.n	80016ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016c8:	e007      	b.n	80016da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	60da      	str	r2, [r3, #12]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <DMA_CalcBaseAndBitshift+0x60>)
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d80f      	bhi.n	800171c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <DMA_CalcBaseAndBitshift+0x64>)
 8001704:	4413      	add	r3, r2
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <DMA_CalcBaseAndBitshift+0x68>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	009a      	lsls	r2, r3, #2
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <DMA_CalcBaseAndBitshift+0x6c>)
 8001718:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800171a:	e00e      	b.n	800173a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <DMA_CalcBaseAndBitshift+0x70>)
 8001724:	4413      	add	r3, r2
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <DMA_CalcBaseAndBitshift+0x68>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	009a      	lsls	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <DMA_CalcBaseAndBitshift+0x74>)
 8001738:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40020407 	.word	0x40020407
 800174c:	bffdfff8 	.word	0xbffdfff8
 8001750:	cccccccd 	.word	0xcccccccd
 8001754:	40020000 	.word	0x40020000
 8001758:	bffdfbf8 	.word	0xbffdfbf8
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e154      	b.n	8001a1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8146 	beq.w	8001a14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a0 	beq.w	8001a14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a57      	ldr	r2, [pc, #348]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b55      	ldr	r3, [pc, #340]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ec:	4a53      	ldr	r2, [pc, #332]	@ (8001a3c <HAL_GPIO_Init+0x2dc>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001916:	d019      	beq.n	800194c <HAL_GPIO_Init+0x1ec>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1e8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a48      	ldr	r2, [pc, #288]	@ (8001a44 <HAL_GPIO_Init+0x2e4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1e4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_GPIO_Init+0x2e8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1e0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a46      	ldr	r2, [pc, #280]	@ (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1dc>
 8001938:	2304      	movs	r3, #4
 800193a:	e008      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800193c:	2305      	movs	r3, #5
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1ee>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	@ (8001a3c <HAL_GPIO_Init+0x2dc>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196c:	4b38      	ldr	r3, [pc, #224]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001990:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ba:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_GPIO_Init+0x2f0>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f aea3 	bne.w	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e08d      	b.n	8001b82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff f832 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	@ 0x24
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ab4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	e006      	b.n	8001adc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ada:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d108      	bne.n	8001af6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	e007      	b.n	8001b06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	817b      	strh	r3, [r7, #10]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	813b      	strh	r3, [r7, #8]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	f040 80c3 	bne.w	8001d3a <HAL_I2C_Mem_Write_DMA+0x1ae>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_I2C_Mem_Write_DMA+0x34>
 8001bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b7      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bda:	d101      	bne.n	8001be0 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e0ad      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Mem_Write_DMA+0x62>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0a6      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2221      	movs	r2, #33	@ 0x21
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2240      	movs	r2, #64	@ 0x40
 8001c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a3a      	ldr	r2, [r7, #32]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d44 <HAL_I2C_Mem_Write_DMA+0x1b8>)
 8001c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a49      	ldr	r2, [pc, #292]	@ (8001d48 <HAL_I2C_Mem_Write_DMA+0x1bc>)
 8001c22:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001c24:	897a      	ldrh	r2, [r7, #10]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2bff      	cmp	r3, #255	@ 0xff
 8001c32:	d903      	bls.n	8001c3c <HAL_I2C_Mem_Write_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	22ff      	movs	r2, #255	@ 0xff
 8001c38:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001c3a:	e004      	b.n	8001c46 <HAL_I2C_Mem_Write_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d109      	bne.n	8001c60 <HAL_I2C_Mem_Write_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c4c:	893b      	ldrh	r3, [r7, #8]
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c5e:	e00b      	b.n	8001c78 <HAL_I2C_Mem_Write_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_I2C_Mem_Write_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c84:	4a31      	ldr	r2, [pc, #196]	@ (8001d4c <HAL_I2C_Mem_Write_DMA+0x1c0>)
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_I2C_Mem_Write_DMA+0x1c4>)
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3328      	adds	r3, #40	@ 0x28
 8001cac:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8001cb2:	f7ff fb5f 	bl	8001374 <HAL_DMA_Start_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d128      	bne.n	8001d12 <HAL_I2C_Mem_Write_DMA+0x186>
 8001cc0:	e013      	b.n	8001cea <HAL_I2C_Mem_Write_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e028      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	8979      	ldrh	r1, [r7, #10]
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_I2C_Mem_Write_DMA+0x1c8>)
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f001 fbc1 	bl	8003480 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d06:	2101      	movs	r1, #1
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f001 fbeb 	bl	80034e4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e014      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_I2C_Mem_Write_DMA+0x1b0>
  }
  else
  {
    return HAL_BUSY;
 8001d3a:	2302      	movs	r3, #2
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	ffff0000 	.word	0xffff0000
 8001d48:	080024a9 	.word	0x080024a9
 8001d4c:	080032cf 	.word	0x080032cf
 8001d50:	08003417 	.word	0x08003417
 8001d54:	80002000 	.word	0x80002000

08001d58 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	817b      	strh	r3, [r7, #10]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	813b      	strh	r3, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	f040 80c2 	bne.w	8001f04 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_I2C_Mem_Read_DMA+0x34>
 8001d86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0b6      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001da6:	d101      	bne.n	8001dac <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0ac      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_I2C_Mem_Read_DMA+0x62>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e0a5      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2222      	movs	r2, #34	@ 0x22
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2240      	movs	r2, #64	@ 0x40
 8001dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a3a      	ldr	r2, [r7, #32]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4a4a      	ldr	r2, [pc, #296]	@ (8001f10 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8001de8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a49      	ldr	r2, [pc, #292]	@ (8001f14 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8001dee:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001df0:	897a      	ldrh	r2, [r7, #10]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2bff      	cmp	r3, #255	@ 0xff
 8001dfe:	d903      	bls.n	8001e08 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	22ff      	movs	r2, #255	@ 0xff
 8001e04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001e06:	e004      	b.n	8001e12 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d109      	bne.n	8001e2c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e18:	893b      	ldrh	r3, [r7, #8]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e2a:	e00b      	b.n	8001e44 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e2c:	893b      	ldrh	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001e3a:	893b      	ldrh	r3, [r7, #8]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	4a31      	ldr	r2, [pc, #196]	@ (8001f18 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8001e52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e58:	4a30      	ldr	r2, [pc, #192]	@ (8001f1c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e60:	2200      	movs	r2, #0
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3324      	adds	r3, #36	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001e7e:	f7ff fa79 	bl	8001374 <HAL_DMA_Start_IT>
 8001e82:	4603      	mov	r3, r0
 8001e84:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d127      	bne.n	8001edc <HAL_I2C_Mem_Read_DMA+0x184>
 8001e8c:	e013      	b.n	8001eb6 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e027      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	8979      	ldrh	r1, [r7, #10]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 fadc 	bl	8003480 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f001 fb06 	bl	80034e4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e014      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef0:	f043 0210 	orr.w	r2, r3, #16
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
  }
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	ffff0000 	.word	0xffff0000
 8001f14:	080024a9 	.word	0x080024a9
 8001f18:	08003365 	.word	0x08003365
 8001f1c:	08003417 	.word	0x08003417
 8001f20:	80002000 	.word	0x80002000

08001f24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
  }
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	09db      	lsrs	r3, r3, #7
 8001f80:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	0a9b      	lsrs	r3, r3, #10
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f043 0208 	orr.w	r2, r3, #8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	09db      	lsrs	r3, r3, #7
 8001fdc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 030b 	and.w	r3, r3, #11
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f001 f823 	bl	8003058 <I2C_ITError>
  }
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
 800204e:	4613      	mov	r3, r2
 8002050:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <I2C_Slave_ISR_IT+0x24>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ed      	b.n	800229a <I2C_Slave_ISR_IT+0x200>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fdf9 	bl	8002cd8 <I2C_ITSlaveCplt>
 80020e6:	e0d3      	b.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d04d      	beq.n	8002190 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d047      	beq.n	8002190 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d128      	bne.n	800215c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b28      	cmp	r3, #40	@ 0x28
 8002114:	d108      	bne.n	8002128 <I2C_Slave_ISR_IT+0x8e>
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800211c:	d104      	bne.n	8002128 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800211e:	6939      	ldr	r1, [r7, #16]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 ff43 	bl	8002fac <I2C_ITListenCplt>
 8002126:	e032      	b.n	800218e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b29      	cmp	r3, #41	@ 0x29
 8002132:	d10e      	bne.n	8002152 <I2C_Slave_ISR_IT+0xb8>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800213a:	d00a      	beq.n	8002152 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f001 f89e 	bl	8003286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fc9c 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 8002150:	e01d      	b.n	800218e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800215a:	e096      	b.n	800228a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2210      	movs	r2, #16
 8002162:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <I2C_Slave_ISR_IT+0xe6>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217c:	f040 8085 	bne.w	800228a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	4619      	mov	r1, r3
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 ff66 	bl	8003058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800218c:	e07d      	b.n	800228a <I2C_Slave_ISR_IT+0x1f0>
 800218e:	e07c      	b.n	800228a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d030      	beq.n	80021fe <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d02a      	beq.n	80021fe <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d018      	beq.n	80021e4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d14f      	bne.n	800228e <I2C_Slave_ISR_IT+0x1f4>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021f4:	d04b      	beq.n	800228e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 fc46 	bl	8002a88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021fc:	e047      	b.n	800228e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002216:	6939      	ldr	r1, [r7, #16]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fb74 	bl	8002906 <I2C_ITAddrCplt>
 800221e:	e037      	b.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d031      	beq.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002234:	2b00      	cmp	r3, #0
 8002236:	d02b      	beq.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d018      	beq.n	8002274 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002272:	e00d      	b.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800227a:	d002      	beq.n	8002282 <I2C_Slave_ISR_IT+0x1e8>
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fc00 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 8002288:	e002      	b.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800228a:	bf00      	nop
 800228c:	e000      	b.n	8002290 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800228e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b088      	sub	sp, #32
 80022a6:	af02      	add	r7, sp, #8
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <I2C_Master_ISR_DMA+0x1a>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e0f0      	b.n	800249e <I2C_Master_ISR_DMA+0x1fc>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d011      	beq.n	8002300 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80022f0:	2120      	movs	r1, #32
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f001 f8f6 	bl	80034e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 ffc4 	bl	8003286 <I2C_Flush_TXDR>
 80022fe:	e0c9      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	09db      	lsrs	r3, r3, #7
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8081 	beq.w	8002410 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002316:	2b00      	cmp	r3, #0
 8002318:	d07a      	beq.n	8002410 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002328:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05c      	beq.n	80023ee <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	b29b      	uxth	r3, r3
 800233c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002340:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	2bff      	cmp	r3, #255	@ 0xff
 800234a:	d914      	bls.n	8002376 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d103      	bne.n	8002368 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002366:	e002      	b.n	800236e <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	22ff      	movs	r2, #255	@ 0xff
 800236c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800236e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e010      	b.n	8002398 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002388:	d003      	beq.n	8002392 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e002      	b.n	8002398 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002396:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239c:	b2da      	uxtb	r2, r3
 800239e:	8a79      	ldrh	r1, [r7, #18]
 80023a0:	2300      	movs	r3, #0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f001 f86a 	bl	8003480 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b22      	cmp	r3, #34	@ 0x22
 80023c8:	d108      	bne.n	80023dc <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023da:	e05b      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023ec:	e052      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023fc:	d003      	beq.n	8002406 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fb05 	bl	8002a0e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002404:	e046      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002406:	2140      	movs	r1, #64	@ 0x40
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fe25 	bl	8003058 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800240e:	e041      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d029      	beq.n	8002470 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002424:	2b00      	cmp	r3, #0
 8002426:	d023      	beq.n	8002470 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002440:	d027      	beq.n	8002492 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800244a:	d108      	bne.n	800245e <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800245a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800245c:	e019      	b.n	8002492 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fad5 	bl	8002a0e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002464:	e015      	b.n	8002492 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002466:	2140      	movs	r1, #64	@ 0x40
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fdf5 	bl	8003058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800246e:	e010      	b.n	8002492 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fb5a 	bl	8002b44 <I2C_ITMasterCplt>
 8002490:	e000      	b.n	8002494 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8002492:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80024b4:	4b94      	ldr	r3, [pc, #592]	@ (8002708 <I2C_Mem_ISR_DMA+0x260>)
 80024b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <I2C_Mem_ISR_DMA+0x1e>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e139      	b.n	800273a <I2C_Mem_ISR_DMA+0x292>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d017      	beq.n	800250a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d011      	beq.n	800250a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2210      	movs	r2, #16
 80024ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f043 0204 	orr.w	r2, r3, #4
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80024fa:	2120      	movs	r1, #32
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fff1 	bl	80034e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 febf 	bl	8003286 <I2C_Flush_TXDR>
 8002508:	e112      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00f      	beq.n	8002536 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f04f 32ff 	mov.w	r2, #4294967295
 8002532:	651a      	str	r2, [r3, #80]	@ 0x50
 8002534:	e0fc      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	09db      	lsrs	r3, r3, #7
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d06e      	beq.n	8002620 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800254a:	2b00      	cmp	r3, #0
 800254c:	d068      	beq.n	8002620 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800254e:	2101      	movs	r1, #1
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f001 f84b 	bl	80035ec <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002556:	2110      	movs	r1, #16
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 ffc3 	bl	80034e4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d056      	beq.n	8002616 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	2bff      	cmp	r3, #255	@ 0xff
 8002570:	d91e      	bls.n	80025b0 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	b2db      	uxtb	r3, r3
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d103      	bne.n	800258e <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800258c:	e002      	b.n	8002594 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	22ff      	movs	r2, #255	@ 0xff
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002598:	b299      	uxth	r1, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	2300      	movs	r3, #0
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 ff69 	bl	8003480 <I2C_TransferConfig>
 80025ae:	e011      	b.n	80025d4 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	b299      	uxth	r1, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 ff56 	bl	8003480 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b22      	cmp	r3, #34	@ 0x22
 80025f0:	d108      	bne.n	8002604 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002600:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002602:	e095      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002612:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002614:	e08c      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fd1d 	bl	8003058 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800261e:	e087      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d071      	beq.n	8002710 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d06b      	beq.n	8002710 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002638:	2101      	movs	r1, #1
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 ffd6 	bl	80035ec <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002640:	2110      	movs	r1, #16
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 ff4e 	bl	80034e4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b22      	cmp	r3, #34	@ 0x22
 8002652:	d101      	bne.n	8002658 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <I2C_Mem_ISR_DMA+0x264>)
 8002656:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	@ 0xff
 8002660:	d91e      	bls.n	80026a0 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d103      	bne.n	800267e <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800267c:	e002      	b.n	8002684 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	22ff      	movs	r2, #255	@ 0xff
 8002682:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	b299      	uxth	r1, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fef1 	bl	8003480 <I2C_TransferConfig>
 800269e:	e011      	b.n	80026c4 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	b299      	uxth	r1, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fede 	bl	8003480 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b22      	cmp	r3, #34	@ 0x22
 80026e0:	d108      	bne.n	80026f4 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026f2:	e01d      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002702:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002704:	e014      	b.n	8002730 <I2C_Mem_ISR_DMA+0x288>
 8002706:	bf00      	nop
 8002708:	80002000 	.word	0x80002000
 800270c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa0a 	bl	8002b44 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop

08002744 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <I2C_Slave_ISR_DMA+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e0ca      	b.n	80028fe <I2C_Slave_ISR_DMA+0x1ba>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002784:	2b00      	cmp	r3, #0
 8002786:	d004      	beq.n	8002792 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 faa4 	bl	8002cd8 <I2C_ITSlaveCplt>
 8002790:	e0b0      	b.n	80028f4 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 809a 	beq.w	80028d4 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8093 	beq.w	80028d4 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	0b9b      	lsrs	r3, r3, #14
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0bdb      	lsrs	r3, r3, #15
 80027be:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07f      	beq.n	80028c6 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0bdb      	lsrs	r3, r3, #15
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0b9b      	lsrs	r3, r3, #14
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 800280a:	2301      	movs	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d128      	bne.n	8002866 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b28      	cmp	r3, #40	@ 0x28
 800281e:	d108      	bne.n	8002832 <I2C_Slave_ISR_DMA+0xee>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002826:	d104      	bne.n	8002832 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 fbbe 	bl	8002fac <I2C_ITListenCplt>
 8002830:	e048      	b.n	80028c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b29      	cmp	r3, #41	@ 0x29
 800283c:	d10e      	bne.n	800285c <I2C_Slave_ISR_DMA+0x118>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002844:	d00a      	beq.n	800285c <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fd19 	bl	8003286 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f917 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 800285a:	e033      	b.n	80028c4 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2210      	movs	r2, #16
 8002862:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002864:	e034      	b.n	80028d0 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2210      	movs	r2, #16
 800286c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f043 0204 	orr.w	r2, r3, #4
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002880:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <I2C_Slave_ISR_DMA+0x14c>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800288e:	d11f      	bne.n	80028d0 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b21      	cmp	r3, #33	@ 0x21
 8002894:	d002      	beq.n	800289c <I2C_Slave_ISR_DMA+0x158>
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b29      	cmp	r3, #41	@ 0x29
 800289a:	d103      	bne.n	80028a4 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	@ 0x21
 80028a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a2:	e008      	b.n	80028b6 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	2b22      	cmp	r3, #34	@ 0x22
 80028a8:	d002      	beq.n	80028b0 <I2C_Slave_ISR_DMA+0x16c>
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ae:	d102      	bne.n	80028b6 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2222      	movs	r2, #34	@ 0x22
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	4619      	mov	r1, r3
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fbcb 	bl	8003058 <I2C_ITError>
      if (treatdmanack == 1U)
 80028c2:	e005      	b.n	80028d0 <I2C_Slave_ISR_DMA+0x18c>
 80028c4:	e004      	b.n	80028d0 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028ce:	e011      	b.n	80028f4 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 80028d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80028d2:	e00f      	b.n	80028f4 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	08db      	lsrs	r3, r3, #3
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f809 	bl	8002906 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3720      	adds	r7, #32
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800291c:	2b28      	cmp	r3, #40	@ 0x28
 800291e:	d16a      	bne.n	80029f6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	0c1b      	lsrs	r3, r3, #16
 8002938:	b29b      	uxth	r3, r3
 800293a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800293e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800295a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d138      	bne.n	80029d6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002964:	897b      	ldrh	r3, [r7, #10]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	b29a      	uxth	r2, r3
 800296a:	89bb      	ldrh	r3, [r7, #12]
 800296c:	4053      	eors	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	f003 0306 	and.w	r3, r3, #6
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11c      	bne.n	80029b2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002978:	897b      	ldrh	r3, [r7, #10]
 800297a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298a:	2b02      	cmp	r3, #2
 800298c:	d13b      	bne.n	8002a06 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2208      	movs	r2, #8
 800299a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029a4:	89ba      	ldrh	r2, [r7, #12]
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	4619      	mov	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fb49 	bl	8002042 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029b0:	e029      	b.n	8002a06 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fe16 	bl	80035ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029c8:	89ba      	ldrh	r2, [r7, #12]
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	4619      	mov	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff fb37 	bl	8002042 <HAL_I2C_AddrCallback>
}
 80029d4:	e017      	b.n	8002a06 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fe06 	bl	80035ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029e8:	89ba      	ldrh	r2, [r7, #12]
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fb27 	bl	8002042 <HAL_I2C_AddrCallback>
}
 80029f4:	e007      	b.n	8002a06 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2208      	movs	r2, #8
 80029fc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b21      	cmp	r3, #33	@ 0x21
 8002a28:	d115      	bne.n	8002a56 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2211      	movs	r2, #17
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fdd3 	bl	80035ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd ffde 	bl	8000a10 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a54:	e014      	b.n	8002a80 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2212      	movs	r2, #18
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fdbd 	bl	80035ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd ffd2 	bl	8000a24 <HAL_I2C_MasterRxCpltCallback>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	0b9b      	lsrs	r3, r3, #14
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e00d      	b.n	8002ada <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	0bdb      	lsrs	r3, r3, #15
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ad8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b29      	cmp	r3, #41	@ 0x29
 8002ae4:	d112      	bne.n	8002b0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2228      	movs	r2, #40	@ 0x28
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2221      	movs	r2, #33	@ 0x21
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002af4:	2101      	movs	r1, #1
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fd78 	bl	80035ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fa88 	bl	800201a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b0a:	e017      	b.n	8002b3c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b16:	d111      	bne.n	8002b3c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2228      	movs	r2, #40	@ 0x28
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2222      	movs	r2, #34	@ 0x22
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b26:	2102      	movs	r1, #2
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fd5f 	bl	80035ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fa79 	bl	800202e <HAL_I2C_SlaveRxCpltCallback>
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	@ 0x21
 8002b64:	d107      	bne.n	8002b76 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b66:	2101      	movs	r1, #1
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fd3f 	bl	80035ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2211      	movs	r2, #17
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b74:	e00c      	b.n	8002b90 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b22      	cmp	r3, #34	@ 0x22
 8002b80:	d106      	bne.n	8002b90 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b82:	2102      	movs	r1, #2
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fd31 	bl	80035ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2212      	movs	r2, #18
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <I2C_ITMasterCplt+0x18c>)
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd4 <I2C_ITMasterCplt+0x190>)
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b60      	cmp	r3, #96	@ 0x60
 8002bd6:	d10b      	bne.n	8002bf0 <I2C_ITMasterCplt+0xac>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002bee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb48 	bl	8003286 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b60      	cmp	r3, #96	@ 0x60
 8002c06:	d002      	beq.n	8002c0e <I2C_ITMasterCplt+0xca>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fa1f 	bl	8003058 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c1a:	e054      	b.n	8002cc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b21      	cmp	r3, #33	@ 0x21
 8002c26:	d124      	bne.n	8002c72 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b40      	cmp	r3, #64	@ 0x40
 8002c40:	d10b      	bne.n	8002c5a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fa0d 	bl	8002072 <HAL_I2C_MemTxCpltCallback>
}
 8002c58:	e035      	b.n	8002cc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fed0 	bl	8000a10 <HAL_I2C_MasterTxCpltCallback>
}
 8002c70:	e029      	b.n	8002cc6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b22      	cmp	r3, #34	@ 0x22
 8002c7c:	d123      	bne.n	8002cc6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2220      	movs	r2, #32
 8002c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b40      	cmp	r3, #64	@ 0x40
 8002c96:	d10b      	bne.n	8002cb0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fea1 	bl	80009f0 <HAL_I2C_MemRxCpltCallback>
}
 8002cae:	e00a      	b.n	8002cc6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd feaf 	bl	8000a24 <HAL_I2C_MasterRxCpltCallback>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	fe00e800 	.word	0xfe00e800
 8002cd4:	ffff0000 	.word	0xffff0000

08002cd8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d04:	7afb      	ldrb	r3, [r7, #11]
 8002d06:	2b21      	cmp	r3, #33	@ 0x21
 8002d08:	d002      	beq.n	8002d10 <I2C_ITSlaveCplt+0x38>
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
 8002d0c:	2b29      	cmp	r3, #41	@ 0x29
 8002d0e:	d108      	bne.n	8002d22 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d10:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fc69 	bl	80035ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2221      	movs	r2, #33	@ 0x21
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d20:	e019      	b.n	8002d56 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	2b22      	cmp	r3, #34	@ 0x22
 8002d26:	d002      	beq.n	8002d2e <I2C_ITSlaveCplt+0x56>
 8002d28:	7afb      	ldrb	r3, [r7, #11]
 8002d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d2c:	d108      	bne.n	8002d40 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002d2e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fc5a 	bl	80035ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2222      	movs	r2, #34	@ 0x22
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d3e:	e00a      	b.n	8002d56 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	2b28      	cmp	r3, #40	@ 0x28
 8002d44:	d107      	bne.n	8002d56 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002d46:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fc4e 	bl	80035ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d64:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa4 <I2C_ITSlaveCplt+0x2cc>)
 8002d72:	400b      	ands	r3, r1
 8002d74:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa85 	bl	8003286 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	0b9b      	lsrs	r3, r3, #14
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d020      	beq.n	8002de2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dae:	e018      	b.n	8002de2 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	0bdb      	lsrs	r3, r3, #15
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d012      	beq.n	8002de2 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d006      	beq.n	8002de2 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d020      	beq.n	8002e30 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d04a      	beq.n	8002ee8 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d044      	beq.n	8002ee8 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d128      	bne.n	8002eba <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b28      	cmp	r3, #40	@ 0x28
 8002e72:	d108      	bne.n	8002e86 <I2C_ITSlaveCplt+0x1ae>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e7a:	d104      	bne.n	8002e86 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f894 	bl	8002fac <I2C_ITListenCplt>
 8002e84:	e030      	b.n	8002ee8 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b29      	cmp	r3, #41	@ 0x29
 8002e90:	d10e      	bne.n	8002eb0 <I2C_ITSlaveCplt+0x1d8>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e98:	d00a      	beq.n	8002eb0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f9ef 	bl	8003286 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fded 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 8002eae:	e01b      	b.n	8002ee8 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	61da      	str	r2, [r3, #28]
 8002eb8:	e016      	b.n	8002ee8 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f043 0204 	orr.w	r2, r3, #4
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <I2C_ITSlaveCplt+0x204>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eda:	d105      	bne.n	8002ee8 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f8b8 	bl	8003058 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8a7 	bl	8003058 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b28      	cmp	r3, #40	@ 0x28
 8002f14:	d141      	bne.n	8002f9a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f847 	bl	8002fac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f1e:	e03c      	b.n	8002f9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f28:	d014      	beq.n	8002f54 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fdac 	bl	8002a88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa8 <I2C_ITSlaveCplt+0x2d0>)
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff f886 	bl	800205e <HAL_I2C_ListenCpltCallback>
}
 8002f52:	e022      	b.n	8002f9a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b22      	cmp	r3, #34	@ 0x22
 8002f5e:	d10e      	bne.n	8002f7e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff f859 	bl	800202e <HAL_I2C_SlaveRxCpltCallback>
}
 8002f7c:	e00d      	b.n	8002f9a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff f840 	bl	800201a <HAL_I2C_SlaveTxCpltCallback>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	fe00e800 	.word	0xfe00e800
 8002fa8:	ffff0000 	.word	0xffff0000

08002fac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	@ (8003054 <I2C_ITListenCplt+0xa8>)
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d022      	beq.n	800302a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800302a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fadc 	bl	80035ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2210      	movs	r2, #16
 800303a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff f80a 	bl	800205e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	ffff0000 	.word	0xffff0000

08003058 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003068:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a6d      	ldr	r2, [pc, #436]	@ (800322c <I2C_ITError+0x1d4>)
 8003076:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b28      	cmp	r3, #40	@ 0x28
 800308e:	d005      	beq.n	800309c <I2C_ITError+0x44>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b29      	cmp	r3, #41	@ 0x29
 8003094:	d002      	beq.n	800309c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b2a      	cmp	r3, #42	@ 0x2a
 800309a:	d10b      	bne.n	80030b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800309c:	2103      	movs	r1, #3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 faa4 	bl	80035ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2228      	movs	r2, #40	@ 0x28
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a60      	ldr	r2, [pc, #384]	@ (8003230 <I2C_ITError+0x1d8>)
 80030b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030b2:	e030      	b.n	8003116 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa97 	bl	80035ec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8e1 	bl	8003286 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b60      	cmp	r3, #96	@ 0x60
 80030ce:	d01f      	beq.n	8003110 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d114      	bne.n	8003110 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d109      	bne.n	8003108 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	f043 0204 	orr.w	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2220      	movs	r2, #32
 800310e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003120:	2b00      	cmp	r3, #0
 8003122:	d039      	beq.n	8003198 <I2C_ITError+0x140>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b11      	cmp	r3, #17
 8003128:	d002      	beq.n	8003130 <I2C_ITError+0xd8>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b21      	cmp	r3, #33	@ 0x21
 800312e:	d133      	bne.n	8003198 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800313a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800313e:	d107      	bne.n	8003150 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800314e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fa8b 	bl	8001670 <HAL_DMA_GetState>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d017      	beq.n	8003190 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	4a33      	ldr	r2, [pc, #204]	@ (8003234 <I2C_ITError+0x1dc>)
 8003166:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	4618      	mov	r0, r3
 8003176:	f7fe f99a 	bl	80014ae <HAL_DMA_Abort_IT>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d04d      	beq.n	800321c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800318a:	4610      	mov	r0, r2
 800318c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800318e:	e045      	b.n	800321c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f851 	bl	8003238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003196:	e041      	b.n	800321c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d039      	beq.n	8003214 <I2C_ITError+0x1bc>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b12      	cmp	r3, #18
 80031a4:	d002      	beq.n	80031ac <I2C_ITError+0x154>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b22      	cmp	r3, #34	@ 0x22
 80031aa:	d133      	bne.n	8003214 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031ba:	d107      	bne.n	80031cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fa4d 	bl	8001670 <HAL_DMA_GetState>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d017      	beq.n	800320c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	4a14      	ldr	r2, [pc, #80]	@ (8003234 <I2C_ITError+0x1dc>)
 80031e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe f95c 	bl	80014ae <HAL_DMA_Abort_IT>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d011      	beq.n	8003220 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003206:	4610      	mov	r0, r2
 8003208:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800320a:	e009      	b.n	8003220 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f813 	bl	8003238 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003212:	e005      	b.n	8003220 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f80f 	bl	8003238 <I2C_TreatErrorCallback>
  }
}
 800321a:	e002      	b.n	8003222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	ffff0000 	.word	0xffff0000
 8003230:	0800209b 	.word	0x0800209b
 8003234:	08003445 	.word	0x08003445

08003238 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b60      	cmp	r3, #96	@ 0x60
 800324a:	d10e      	bne.n	800326a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe ff0f 	bl	8002086 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003268:	e009      	b.n	800327e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fd fbdd 	bl	8000a38 <HAL_I2C_ErrorCallback>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d103      	bne.n	80032a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d007      	beq.n	80032c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	619a      	str	r2, [r3, #24]
  }
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032ea:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80032f6:	2120      	movs	r1, #32
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f8f3 	bl	80034e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80032fe:	e02d      	b.n	800335c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2bff      	cmp	r3, #255	@ 0xff
 8003316:	d903      	bls.n	8003320 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	22ff      	movs	r2, #255	@ 0xff
 800331c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800331e:	e004      	b.n	800332a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	4619      	mov	r1, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3328      	adds	r3, #40	@ 0x28
 800333a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003340:	f7fe f818 	bl	8001374 <HAL_DMA_Start_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800334a:	2110      	movs	r1, #16
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff fe83 	bl	8003058 <I2C_ITError>
}
 8003352:	e003      	b.n	800335c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003354:	2140      	movs	r1, #64	@ 0x40
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8c4 	bl	80034e4 <I2C_Enable_IRQ>
}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003380:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800338c:	2120      	movs	r1, #32
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8a8 	bl	80034e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003394:	e03b      	b.n	800340e <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800339e:	441a      	add	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2bff      	cmp	r3, #255	@ 0xff
 80033ac:	d911      	bls.n	80033d2 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d103      	bne.n	80033ca <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033c8:	e008      	b.n	80033dc <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	22ff      	movs	r2, #255	@ 0xff
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
 80033d0:	e004      	b.n	80033dc <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3324      	adds	r3, #36	@ 0x24
 80033e6:	4619      	mov	r1, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80033f2:	f7fd ffbf 	bl	8001374 <HAL_DMA_Start_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80033fc:	2110      	movs	r1, #16
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff fe2a 	bl	8003058 <I2C_ITError>
}
 8003404:	e003      	b.n	800340e <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003406:	2140      	movs	r1, #64	@ 0x40
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f86b 	bl	80034e4 <I2C_Enable_IRQ>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003422:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003432:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003434:	2110      	movs	r1, #16
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f7ff fe0e 	bl	8003058 <I2C_ITError>
}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	2200      	movs	r2, #0
 8003460:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	2200      	movs	r2, #0
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fee0 	bl	8003238 <I2C_TreatErrorCallback>
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	460b      	mov	r3, r1
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	4613      	mov	r3, r2
 8003490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003492:	897b      	ldrh	r3, [r7, #10]
 8003494:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003498:	7a7b      	ldrb	r3, [r7, #9]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	0d5b      	lsrs	r3, r3, #21
 80034ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <I2C_TransferConfig+0x60>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	43db      	mvns	r3, r3
 80034c4:	ea02 0103 	and.w	r1, r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	03ff63ff 	.word	0x03ff63ff

080034e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f8:	4a39      	ldr	r2, [pc, #228]	@ (80035e0 <I2C_Enable_IRQ+0xfc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d032      	beq.n	8003564 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003502:	4a38      	ldr	r2, [pc, #224]	@ (80035e4 <I2C_Enable_IRQ+0x100>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d02d      	beq.n	8003564 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800350c:	4a36      	ldr	r2, [pc, #216]	@ (80035e8 <I2C_Enable_IRQ+0x104>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d028      	beq.n	8003564 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003512:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003516:	2b00      	cmp	r3, #0
 8003518:	da03      	bge.n	8003522 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003520:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003532:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003544:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	2b10      	cmp	r3, #16
 800354a:	d103      	bne.n	8003554 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	2b20      	cmp	r3, #32
 8003558:	d133      	bne.n	80035c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003562:	e02e      	b.n	80035c2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003568:	2b00      	cmp	r3, #0
 800356a:	da03      	bge.n	8003574 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003572:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003584:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003596:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	2b10      	cmp	r3, #16
 800359c:	d103      	bne.n	80035a6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80035a4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d103      	bne.n	80035b4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80035b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d103      	bne.n	80035c2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	080022a3 	.word	0x080022a3
 80035e4:	08002745 	.word	0x08002745
 80035e8:	080024a9 	.word	0x080024a9

080035ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00f      	beq.n	8003626 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800360c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800361a:	2b28      	cmp	r3, #40	@ 0x28
 800361c:	d003      	beq.n	8003626 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003624:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00f      	beq.n	8003650 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003636:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003644:	2b28      	cmp	r3, #40	@ 0x28
 8003646:	d003      	beq.n	8003650 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800364e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003650:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003654:	2b00      	cmp	r3, #0
 8003656:	da03      	bge.n	8003660 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800365e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	2b10      	cmp	r3, #16
 8003664:	d103      	bne.n	800366e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	2b20      	cmp	r3, #32
 8003672:	d103      	bne.n	800367c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d103      	bne.n	800368a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003688:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43da      	mvns	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	400a      	ands	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d138      	bne.n	8003730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e032      	b.n	8003732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6819      	ldr	r1, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	d139      	bne.n	80037c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800375e:	2302      	movs	r3, #2
 8003760:	e033      	b.n	80037ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2224      	movs	r2, #36	@ 0x24
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0201 	bic.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f000 bff4 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 816d 	beq.w	8003aee <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003814:	4bb4      	ldr	r3, [pc, #720]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00c      	beq.n	800383a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003820:	4bb1      	ldr	r3, [pc, #708]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d157      	bne.n	80038dc <HAL_RCC_OscConfig+0x104>
 800382c:	4bae      	ldr	r3, [pc, #696]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d150      	bne.n	80038dc <HAL_RCC_OscConfig+0x104>
 800383a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800383e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003842:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800384e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b3f      	cmp	r3, #63	@ 0x3f
 800385a:	d802      	bhi.n	8003862 <HAL_RCC_OscConfig+0x8a>
 800385c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	e015      	b.n	800388e <HAL_RCC_OscConfig+0xb6>
 8003862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003866:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800387e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800388a:	4b97      	ldr	r3, [pc, #604]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003892:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003896:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800389a:	fa92 f2a2 	rbit	r2, r2
 800389e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80038a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f002 021f 	and.w	r2, r2, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8114 	beq.w	8003aec <HAL_RCC_OscConfig+0x314>
 80038c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f040 810b 	bne.w	8003aec <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f000 bf85 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x124>
 80038ee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e036      	b.n	800396a <HAL_RCC_OscConfig+0x192>
 80038fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10c      	bne.n	8003926 <HAL_RCC_OscConfig+0x14e>
 800390c:	4b76      	ldr	r3, [pc, #472]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a75      	ldr	r2, [pc, #468]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b73      	ldr	r3, [pc, #460]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a72      	ldr	r2, [pc, #456]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e021      	b.n	800396a <HAL_RCC_OscConfig+0x192>
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x17a>
 8003938:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6a      	ldr	r2, [pc, #424]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800393e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b68      	ldr	r3, [pc, #416]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a67      	ldr	r2, [pc, #412]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	e00b      	b.n	800396a <HAL_RCC_OscConfig+0x192>
 8003952:	4b65      	ldr	r3, [pc, #404]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a64      	ldr	r2, [pc, #400]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b62      	ldr	r3, [pc, #392]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003968:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800396a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	495a      	ldr	r1, [pc, #360]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003980:	4313      	orrs	r3, r2
 8003982:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003988:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d054      	beq.n	8003a3e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd fb66 	bl	8001064 <HAL_GetTick>
 8003998:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399e:	f7fd fb61 	bl	8001064 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d902      	bls.n	80039b4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	f000 bf19 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 80039b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80039c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80039d4:	d802      	bhi.n	80039dc <HAL_RCC_OscConfig+0x204>
 80039d6:	4b44      	ldr	r3, [pc, #272]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	e015      	b.n	8003a08 <HAL_RCC_OscConfig+0x230>
 80039dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039e0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003a04:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a0c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003a10:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a14:	fa92 f2a2 	rbit	r2, r2
 8003a18:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003a1c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003a20:	fab2 f282 	clz	r2, r2
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	f042 0220 	orr.w	r2, r2, #32
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f002 021f 	and.w	r2, r2, #31
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0b0      	beq.n	800399e <HAL_RCC_OscConfig+0x1c6>
 8003a3c:	e057      	b.n	8003aee <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fb11 	bl	8001064 <HAL_GetTick>
 8003a42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd fb0c 	bl	8001064 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	@ 0x64
 8003a56:	d902      	bls.n	8003a5e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f000 bec4 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 8003a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a62:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003a72:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a7e:	d802      	bhi.n	8003a86 <HAL_RCC_OscConfig+0x2ae>
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x2da>
 8003a86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a8a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003aa2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <HAL_RCC_OscConfig+0x310>)
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ab6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003aba:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003ac6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003aca:	fab2 f282 	clz	r2, r2
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	f042 0220 	orr.w	r2, r2, #32
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f002 021f 	and.w	r2, r2, #31
 8003ada:	2101      	movs	r1, #1
 8003adc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1b0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x270>
 8003ae6:	e002      	b.n	8003aee <HAL_RCC_OscConfig+0x316>
 8003ae8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 816c 	beq.w	8003ddc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b04:	4bcc      	ldr	r3, [pc, #816]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b10:	4bc9      	ldr	r3, [pc, #804]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 030c 	and.w	r3, r3, #12
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d16d      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x420>
 8003b1c:	4bc6      	ldr	r3, [pc, #792]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d167      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x420>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003b3a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b46:	d802      	bhi.n	8003b4e <HAL_RCC_OscConfig+0x376>
 8003b48:	4bbb      	ldr	r3, [pc, #748]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	e013      	b.n	8003b76 <HAL_RCC_OscConfig+0x39e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b66:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b72:	4bb1      	ldr	r3, [pc, #708]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	2202      	movs	r2, #2
 8003b78:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b80:	fa92 f2a2 	rbit	r2, r2
 8003b84:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003b88:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3e6>
 8003ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f000 be14 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b9e      	ldr	r3, [pc, #632]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	21f8      	movs	r1, #248	@ 0xf8
 8003bd4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003bdc:	fa91 f1a1 	rbit	r1, r1
 8003be0:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003be4:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003be8:	fab1 f181 	clz	r1, r1
 8003bec:	b2c9      	uxtb	r1, r1
 8003bee:	408b      	lsls	r3, r1
 8003bf0:	4991      	ldr	r1, [pc, #580]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf6:	e0f1      	b.n	8003ddc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8083 	beq.w	8003d10 <HAL_RCC_OscConfig+0x538>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003c14:	fa93 f3a3 	rbit	r3, r3
 8003c18:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003c1c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	fab3 f383 	clz	r3, r3
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	461a      	mov	r2, r3
 8003c32:	2301      	movs	r3, #1
 8003c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd fa15 	bl	8001064 <HAL_GetTick>
 8003c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd fa10 	bl	8001064 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	f000 bdc8 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c74:	d802      	bhi.n	8003c7c <HAL_RCC_OscConfig+0x4a4>
 8003c76:	4b70      	ldr	r3, [pc, #448]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	e013      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4cc>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c8e:	2302      	movs	r3, #2
 8003c90:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c94:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003ca0:	4b65      	ldr	r3, [pc, #404]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003caa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003cae:	fa92 f2a2 	rbit	r2, r2
 8003cb2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003cb6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003cba:	fab2 f282 	clz	r2, r2
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	f002 021f 	and.w	r2, r2, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0b4      	beq.n	8003c40 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	4b58      	ldr	r3, [pc, #352]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	21f8      	movs	r1, #248	@ 0xf8
 8003cec:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003cf4:	fa91 f1a1 	rbit	r1, r1
 8003cf8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003cfc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003d00:	fab1 f181 	clz	r1, r1
 8003d04:	b2c9      	uxtb	r1, r1
 8003d06:	408b      	lsls	r3, r1
 8003d08:	494b      	ldr	r1, [pc, #300]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]
 8003d0e:	e065      	b.n	8003ddc <HAL_RCC_OscConfig+0x604>
 8003d10:	2301      	movs	r3, #1
 8003d12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d30:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	461a      	mov	r2, r3
 8003d38:	2300      	movs	r3, #0
 8003d3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd f992 	bl	8001064 <HAL_GetTick>
 8003d40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fd f98d 	bl	8001064 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d902      	bls.n	8003d5c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f000 bd45 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d7a:	d802      	bhi.n	8003d82 <HAL_RCC_OscConfig+0x5aa>
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	e013      	b.n	8003daa <HAL_RCC_OscConfig+0x5d2>
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d94:	2302      	movs	r3, #2
 8003d96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003da6:	4b24      	ldr	r3, [pc, #144]	@ (8003e38 <HAL_RCC_OscConfig+0x660>)
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2202      	movs	r2, #2
 8003dac:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003db0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003dbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003dc0:	fab2 f282 	clz	r2, r2
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	f042 0220 	orr.w	r2, r2, #32
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f002 021f 	and.w	r2, r2, #31
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1b4      	bne.n	8003d46 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8115 	beq.w	800401c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d07e      	beq.n	8003f00 <HAL_RCC_OscConfig+0x728>
 8003e02:	2301      	movs	r3, #1
 8003e04:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_OscConfig+0x664>)
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	2301      	movs	r3, #1
 8003e2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2c:	f7fd f91a 	bl	8001064 <HAL_GetTick>
 8003e30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e34:	e00f      	b.n	8003e56 <HAL_RCC_OscConfig+0x67e>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e40:	f7fd f910 	bl	8001064 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d902      	bls.n	8003e56 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f000 bcc8 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e70:	2202      	movs	r2, #2
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	fa93 f2a3 	rbit	r2, r3
 8003e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e94:	2202      	movs	r2, #2
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f2a3 	rbit	r2, r3
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003eae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8003eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	6019      	str	r1, [r3, #0]
 8003ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f1a3 	rbit	r1, r3
 8003ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ed6:	6019      	str	r1, [r3, #0]
  return result;
 8003ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003edc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0a0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x668>
 8003efe:	e08d      	b.n	800401c <HAL_RCC_OscConfig+0x844>
 8003f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f10:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b90      	ldr	r3, [pc, #576]	@ (8004178 <HAL_RCC_OscConfig+0x9a0>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fd f88f 	bl	8001064 <HAL_GetTick>
 8003f46:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fd f88a 	bl	8001064 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d902      	bls.n	8003f62 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f000 bc42 	b.w	80047e6 <HAL_RCC_OscConfig+0x100e>
 8003f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	fa93 f2a3 	rbit	r2, r3
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fce:	4b69      	ldr	r3, [pc, #420]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8003fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fda:	2102      	movs	r1, #2
 8003fdc:	6019      	str	r1, [r3, #0]
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f1a3 	rbit	r1, r3
 8003fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ff4:	6019      	str	r1, [r3, #0]
  return result;
 8003ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2101      	movs	r1, #1
 8004012:	fa01 f303 	lsl.w	r3, r1, r3
 8004016:	4013      	ands	r3, r2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d197      	bne.n	8003f4c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004020:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 819e 	beq.w	800436e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004038:	4b4e      	ldr	r3, [pc, #312]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d116      	bne.n	8004072 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a4a      	ldr	r2, [pc, #296]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
 8004050:	4b48      	ldr	r3, [pc, #288]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004066:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800406a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b42      	ldr	r3, [pc, #264]	@ (800417c <HAL_RCC_OscConfig+0x9a4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b3f      	ldr	r3, [pc, #252]	@ (800417c <HAL_RCC_OscConfig+0x9a4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a3e      	ldr	r2, [pc, #248]	@ (800417c <HAL_RCC_OscConfig+0x9a4>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fc ffeb 	bl	8001064 <HAL_GetTick>
 800408e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	e009      	b.n	80040a8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7fc ffe6 	bl	8001064 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b64      	cmp	r3, #100	@ 0x64
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e39e      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	4b34      	ldr	r3, [pc, #208]	@ (800417c <HAL_RCC_OscConfig+0x9a4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x8fa>
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6213      	str	r3, [r2, #32]
 80040d0:	e035      	b.n	800413e <HAL_RCC_OscConfig+0x966>
 80040d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0x924>
 80040e2:	4b24      	ldr	r3, [pc, #144]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4a23      	ldr	r2, [pc, #140]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6213      	str	r3, [r2, #32]
 80040ee:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6213      	str	r3, [r2, #32]
 80040fa:	e020      	b.n	800413e <HAL_RCC_OscConfig+0x966>
 80040fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004100:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b05      	cmp	r3, #5
 800410a:	d10c      	bne.n	8004126 <HAL_RCC_OscConfig+0x94e>
 800410c:	4b19      	ldr	r3, [pc, #100]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4a18      	ldr	r2, [pc, #96]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	6213      	str	r3, [r2, #32]
 8004118:	4b16      	ldr	r3, [pc, #88]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	6213      	str	r3, [r2, #32]
 8004124:	e00b      	b.n	800413e <HAL_RCC_OscConfig+0x966>
 8004126:	4b13      	ldr	r3, [pc, #76]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6213      	str	r3, [r2, #32]
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4a0f      	ldr	r2, [pc, #60]	@ (8004174 <HAL_RCC_OscConfig+0x99c>)
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800413e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004142:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8087 	beq.w	800425e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004150:	f7fc ff88 	bl	8001064 <HAL_GetTick>
 8004154:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	e012      	b.n	8004180 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fc ff83 	bl	8001064 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d908      	bls.n	8004180 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e339      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	10908120 	.word	0x10908120
 800417c:	40007000 	.word	0x40007000
 8004180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004184:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004190:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041ac:	2202      	movs	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fa93 f2a3 	rbit	r2, r3
 80041be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_RCC_OscConfig+0xa10>
 80041e2:	4b98      	ldr	r3, [pc, #608]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	e013      	b.n	8004210 <HAL_RCC_OscConfig+0xa38>
 80041e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041f0:	2202      	movs	r2, #2
 80041f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	fa93 f2a3 	rbit	r2, r3
 8004202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004206:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	4b8d      	ldr	r3, [pc, #564]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004214:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004218:	2102      	movs	r1, #2
 800421a:	6011      	str	r1, [r2, #0]
 800421c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004220:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	fa92 f1a2 	rbit	r1, r2
 800422a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800422e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004232:	6011      	str	r1, [r2, #0]
  return result;
 8004234:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004238:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	fab2 f282 	clz	r2, r2
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	f002 021f 	and.w	r2, r2, #31
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f202 	lsl.w	r2, r1, r2
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	f43f af7f 	beq.w	800415a <HAL_RCC_OscConfig+0x982>
 800425c:	e07d      	b.n	800435a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fc ff01 	bl	8001064 <HAL_GetTick>
 8004262:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004266:	e00b      	b.n	8004280 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fc fefc 	bl	8001064 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e2b2      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 8004280:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004284:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004288:	2202      	movs	r2, #2
 800428a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004290:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	fa93 f2a3 	rbit	r2, r3
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042ac:	2202      	movs	r2, #2
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	fa93 f2a3 	rbit	r2, r3
 80042be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042c6:	601a      	str	r2, [r3, #0]
  return result;
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_RCC_OscConfig+0xb10>
 80042e2:	4b58      	ldr	r3, [pc, #352]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	e013      	b.n	8004310 <HAL_RCC_OscConfig+0xb38>
 80042e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ec:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042f0:	2202      	movs	r2, #2
 80042f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fa93 f2a3 	rbit	r2, r3
 8004302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004306:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	4b4d      	ldr	r3, [pc, #308]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004314:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004318:	2102      	movs	r1, #2
 800431a:	6011      	str	r1, [r2, #0]
 800431c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004320:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	fa92 f1a2 	rbit	r1, r2
 800432a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800432e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004332:	6011      	str	r1, [r2, #0]
  return result;
 8004334:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004338:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	fab2 f282 	clz	r2, r2
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004348:	b2d2      	uxtb	r2, r2
 800434a:	f002 021f 	and.w	r2, r2, #31
 800434e:	2101      	movs	r1, #1
 8004350:	fa01 f202 	lsl.w	r2, r1, r2
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d186      	bne.n	8004268 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800435a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b38      	ldr	r3, [pc, #224]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4a37      	ldr	r2, [pc, #220]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800436c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004372:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8232 	beq.w	80047e4 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004380:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	f000 8201 	beq.w	8004790 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b02      	cmp	r3, #2
 800439c:	f040 8157 	bne.w	800464e <HAL_RCC_OscConfig+0xe76>
 80043a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fa93 f2a3 	rbit	r2, r3
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043c4:	601a      	str	r2, [r3, #0]
  return result;
 80043c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043ce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fc fe3d 	bl	8001064 <HAL_GetTick>
 80043ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ee:	e009      	b.n	8004404 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f0:	f7fc fe38 	bl	8001064 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1f0      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 8004404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004408:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800440c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004410:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004416:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fa93 f2a3 	rbit	r2, r3
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004428:	601a      	str	r2, [r3, #0]
  return result;
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004432:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b3f      	cmp	r3, #63	@ 0x3f
 800443c:	d804      	bhi.n	8004448 <HAL_RCC_OscConfig+0xc70>
 800443e:	4b01      	ldr	r3, [pc, #4]	@ (8004444 <HAL_RCC_OscConfig+0xc6c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	e029      	b.n	8004498 <HAL_RCC_OscConfig+0xcc0>
 8004444:	40021000 	.word	0x40021000
 8004448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004450:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800445a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	fa93 f2a3 	rbit	r2, r3
 8004464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004468:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004472:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004476:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	fa93 f2a3 	rbit	r2, r3
 800448a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	4bc3      	ldr	r3, [pc, #780]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800449c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044a0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044aa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	fa92 f1a2 	rbit	r1, r2
 80044b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044b8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044bc:	6011      	str	r1, [r2, #0]
  return result;
 80044be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044c2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	fab2 f282 	clz	r2, r2
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	f002 021f 	and.w	r2, r2, #31
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f202 	lsl.w	r2, r1, r2
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d185      	bne.n	80043f0 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e4:	4baf      	ldr	r3, [pc, #700]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	430b      	orrs	r3, r1
 8004506:	49a7      	ldr	r1, [pc, #668]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	604b      	str	r3, [r1, #4]
 800450c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004510:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	fa93 f2a3 	rbit	r2, r3
 8004528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004530:	601a      	str	r2, [r3, #0]
  return result;
 8004532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004536:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800453a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004546:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	461a      	mov	r2, r3
 800454e:	2301      	movs	r3, #1
 8004550:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fc fd87 	bl	8001064 <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800455a:	e009      	b.n	8004570 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fc fd82 	bl	8001064 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e13a      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 8004570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004574:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800457c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004582:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	fa93 f2a3 	rbit	r2, r3
 800458c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004590:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004594:	601a      	str	r2, [r3, #0]
  return result;
 8004596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800459e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80045a8:	d802      	bhi.n	80045b0 <HAL_RCC_OscConfig+0xdd8>
 80045aa:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	e027      	b.n	8004600 <HAL_RCC_OscConfig+0xe28>
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	fa93 f2a3 	rbit	r2, r3
 80045cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045da:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	fa93 f2a3 	rbit	r2, r3
 80045f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	4b69      	ldr	r3, [pc, #420]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004604:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004608:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004612:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	fa92 f1a2 	rbit	r1, r2
 800461c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004620:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004624:	6011      	str	r1, [r2, #0]
  return result;
 8004626:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800462a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	fab2 f282 	clz	r2, r2
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	f002 021f 	and.w	r2, r2, #31
 8004640:	2101      	movs	r1, #1
 8004642:	fa01 f202 	lsl.w	r2, r1, r2
 8004646:	4013      	ands	r3, r2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d087      	beq.n	800455c <HAL_RCC_OscConfig+0xd84>
 800464c:	e0ca      	b.n	80047e4 <HAL_RCC_OscConfig+0x100c>
 800464e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004652:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004656:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800465a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004660:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	fa93 f2a3 	rbit	r2, r3
 800466a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004672:	601a      	str	r2, [r3, #0]
  return result;
 8004674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004678:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800467c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004688:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	461a      	mov	r2, r3
 8004690:	2300      	movs	r3, #0
 8004692:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fc fce6 	bl	8001064 <HAL_GetTick>
 8004698:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469c:	e009      	b.n	80046b2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469e:	f7fc fce1 	bl	8001064 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e099      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 80046b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046d6:	601a      	str	r2, [r3, #0]
  return result;
 80046d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046dc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80046ea:	d802      	bhi.n	80046f2 <HAL_RCC_OscConfig+0xf1a>
 80046ec:	4b2d      	ldr	r3, [pc, #180]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	e027      	b.n	8004742 <HAL_RCC_OscConfig+0xf6a>
 80046f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80046fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004704:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	fa93 f2a3 	rbit	r2, r3
 800470e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004712:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	4b19      	ldr	r3, [pc, #100]	@ (80047a4 <HAL_RCC_OscConfig+0xfcc>)
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004746:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800474a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800474e:	6011      	str	r1, [r2, #0]
 8004750:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004754:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	fa92 f1a2 	rbit	r1, r2
 800475e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004762:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004766:	6011      	str	r1, [r2, #0]
  return result;
 8004768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800476c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	fab2 f282 	clz	r2, r2
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	f042 0220 	orr.w	r2, r2, #32
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	f002 021f 	and.w	r2, r2, #31
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f202 	lsl.w	r2, r1, r2
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d187      	bne.n	800469e <HAL_RCC_OscConfig+0xec6>
 800478e:	e029      	b.n	80047e4 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004794:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d103      	bne.n	80047a8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e020      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
 80047a4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_RCC_OscConfig+0x1018>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047b0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40021000 	.word	0x40021000

080047f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b09e      	sub	sp, #120	@ 0x78
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e154      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b89      	ldr	r3, [pc, #548]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d910      	bls.n	800483c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b86      	ldr	r3, [pc, #536]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	4984      	ldr	r1, [pc, #528]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b82      	ldr	r3, [pc, #520]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e13c      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b7b      	ldr	r3, [pc, #492]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4978      	ldr	r1, [pc, #480]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80cd 	beq.w	8004a02 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d137      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xec>
 8004870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004874:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800487e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004880:	fab3 f383 	clz	r3, r3
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b3f      	cmp	r3, #63	@ 0x3f
 8004888:	d802      	bhi.n	8004890 <HAL_RCC_ClockConfig+0x9c>
 800488a:	4b6b      	ldr	r3, [pc, #428]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	e00f      	b.n	80048b0 <HAL_RCC_ClockConfig+0xbc>
 8004890:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004894:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	667b      	str	r3, [r7, #100]	@ 0x64
 800489e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80048a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ac:	4b62      	ldr	r3, [pc, #392]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048b8:	fa92 f2a2 	rbit	r2, r2
 80048bc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f202 	lsl.w	r2, r1, r2
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d171      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e0ea      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d137      	bne.n	8004958 <HAL_RCC_ClockConfig+0x164>
 80048e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80048f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8004900:	d802      	bhi.n	8004908 <HAL_RCC_ClockConfig+0x114>
 8004902:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	e00f      	b.n	8004928 <HAL_RCC_ClockConfig+0x134>
 8004908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800490c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004910:	fa93 f3a3 	rbit	r3, r3
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
 8004916:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800491a:	643b      	str	r3, [r7, #64]	@ 0x40
 800491c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004924:	4b44      	ldr	r3, [pc, #272]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800492c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800492e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004930:	fa92 f2a2 	rbit	r2, r2
 8004934:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004936:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004938:	fab2 f282 	clz	r2, r2
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	f042 0220 	orr.w	r2, r2, #32
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f002 021f 	and.w	r2, r2, #31
 8004948:	2101      	movs	r1, #1
 800494a:	fa01 f202 	lsl.w	r2, r1, r2
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d135      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0ae      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
 8004958:	2302      	movs	r3, #2
 800495a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b3f      	cmp	r3, #63	@ 0x3f
 800496e:	d802      	bhi.n	8004976 <HAL_RCC_ClockConfig+0x182>
 8004970:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	e00d      	b.n	8004992 <HAL_RCC_ClockConfig+0x19e>
 8004976:	2302      	movs	r3, #2
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
 8004982:	2302      	movs	r3, #2
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	fa93 f3a3 	rbit	r3, r3
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	4b2a      	ldr	r3, [pc, #168]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	2202      	movs	r2, #2
 8004994:	61ba      	str	r2, [r7, #24]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	fa92 f2a2 	rbit	r2, r2
 800499c:	617a      	str	r2, [r7, #20]
  return result;
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	fab2 f282 	clz	r2, r2
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	f042 0220 	orr.w	r2, r2, #32
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	f002 021f 	and.w	r2, r2, #31
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f202 	lsl.w	r2, r1, r2
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e07a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	491a      	ldr	r1, [pc, #104]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d2:	f7fc fb47 	bl	8001064 <HAL_GetTick>
 80049d6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d8:	e00a      	b.n	80049f0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049da:	f7fc fb43 	bl	8001064 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e062      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f0:	4b11      	ldr	r3, [pc, #68]	@ (8004a38 <HAL_RCC_ClockConfig+0x244>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 020c 	and.w	r2, r3, #12
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d1eb      	bne.n	80049da <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a02:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d215      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 0207 	bic.w	r2, r3, #7
 8004a18:	4906      	ldr	r1, [pc, #24]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a20:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <HAL_RCC_ClockConfig+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d006      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e041      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x2c2>
 8004a32:	bf00      	nop
 8004a34:	40022000 	.word	0x40022000
 8004a38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <HAL_RCC_ClockConfig+0x2cc>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	491a      	ldr	r1, [pc, #104]	@ (8004ac0 <HAL_RCC_ClockConfig+0x2cc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <HAL_RCC_ClockConfig+0x2cc>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4912      	ldr	r1, [pc, #72]	@ (8004ac0 <HAL_RCC_ClockConfig+0x2cc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a7a:	f000 f829 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <HAL_RCC_ClockConfig+0x2cc>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a88:	22f0      	movs	r2, #240	@ 0xf0
 8004a8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	fa92 f2a2 	rbit	r2, r2
 8004a92:	60fa      	str	r2, [r7, #12]
  return result;
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	fab2 f282 	clz	r2, r2
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	40d3      	lsrs	r3, r2
 8004a9e:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <HAL_RCC_ClockConfig+0x2d0>)
 8004aa0:	5cd3      	ldrb	r3, [r2, r3]
 8004aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8004aa6:	4a08      	ldr	r2, [pc, #32]	@ (8004ac8 <HAL_RCC_ClockConfig+0x2d4>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <HAL_RCC_ClockConfig+0x2d8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fa94 	bl	8000fdc <HAL_InitTick>
  
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3778      	adds	r7, #120	@ 0x78
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	080072a8 	.word	0x080072a8
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	20000004 	.word	0x20000004

08004ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d002      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x30>
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d003      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x36>
 8004afe:	e026      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b02:	613b      	str	r3, [r7, #16]
      break;
 8004b04:	e026      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	0c9b      	lsrs	r3, r3, #18
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a17      	ldr	r2, [pc, #92]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b14:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	4a14      	ldr	r2, [pc, #80]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b1e:	5cd3      	ldrb	r3, [r2, r3]
 8004b20:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e004      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a0c      	ldr	r2, [pc, #48]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
      break;
 8004b4c:	e002      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b50:	613b      	str	r3, [r7, #16]
      break;
 8004b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b54:	693b      	ldr	r3, [r7, #16]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	007a1200 	.word	0x007a1200
 8004b6c:	080072c0 	.word	0x080072c0
 8004b70:	080072d0 	.word	0x080072d0
 8004b74:	003d0900 	.word	0x003d0900

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b96:	f7ff ffef 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ba4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004ba8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	fa92 f2a2 	rbit	r2, r2
 8004bb0:	603a      	str	r2, [r7, #0]
  return result;
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	fab2 f282 	clz	r2, r2
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	40d3      	lsrs	r3, r2
 8004bbc:	4a04      	ldr	r2, [pc, #16]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	080072b8 	.word	0x080072b8

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004bda:	f7ff ffcd 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bde:	4601      	mov	r1, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004be8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004bec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	fa92 f2a2 	rbit	r2, r2
 8004bf4:	603a      	str	r2, [r7, #0]
  return result;
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	fab2 f282 	clz	r2, r2
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	40d3      	lsrs	r3, r2
 8004c00:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	080072b8 	.word	0x080072b8

08004c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b092      	sub	sp, #72	@ 0x48
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80d2 	beq.w	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10e      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c48:	4b4a      	ldr	r3, [pc, #296]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	4a49      	ldr	r2, [pc, #292]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	61d3      	str	r3, [r2, #28]
 8004c54:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c60:	2301      	movs	r3, #1
 8004c62:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c66:	4b44      	ldr	r3, [pc, #272]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d118      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c72:	4b41      	ldr	r3, [pc, #260]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a40      	ldr	r2, [pc, #256]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c7e:	f7fc f9f1 	bl	8001064 <HAL_GetTick>
 8004c82:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c86:	f7fc f9ed 	bl	8001064 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b64      	cmp	r3, #100	@ 0x64
 8004c92:	d901      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e167      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4b37      	ldr	r3, [pc, #220]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca4:	4b33      	ldr	r3, [pc, #204]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8082 	beq.w	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d07a      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b25      	ldr	r3, [pc, #148]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	461a      	mov	r2, r3
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	461a      	mov	r2, r3
 8004d12:	2300      	movs	r3, #0
 8004d14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d16:	4a17      	ldr	r2, [pc, #92]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d049      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fc f99d 	bl	8001064 <HAL_GetTick>
 8004d2a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fc f999 	bl	8001064 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e111      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004d44:	2302      	movs	r3, #2
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4a:	fa93 f3a3 	rbit	r3, r3
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d50:	2302      	movs	r3, #2
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	fa93 f3a3 	rbit	r3, r3
 8004d5a:	61fb      	str	r3, [r7, #28]
  return result;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	fab3 f383 	clz	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d108      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004d6e:	4b01      	ldr	r3, [pc, #4]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	e00d      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	10908100 	.word	0x10908100
 8004d80:	2302      	movs	r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fa93 f3a3 	rbit	r3, r3
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	4b78      	ldr	r3, [pc, #480]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	2202      	movs	r2, #2
 8004d92:	613a      	str	r2, [r7, #16]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	fa92 f2a2 	rbit	r2, r2
 8004d9a:	60fa      	str	r2, [r7, #12]
  return result;
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	fab2 f282 	clz	r2, r2
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f002 021f 	and.w	r2, r2, #31
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0b9      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004dba:	4b6d      	ldr	r3, [pc, #436]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	496a      	ldr	r1, [pc, #424]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd4:	4b66      	ldr	r3, [pc, #408]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4a65      	ldr	r2, [pc, #404]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dec:	4b60      	ldr	r3, [pc, #384]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	495d      	ldr	r1, [pc, #372]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0a:	4b59      	ldr	r3, [pc, #356]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4956      	ldr	r1, [pc, #344]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e28:	4b51      	ldr	r3, [pc, #324]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	494e      	ldr	r1, [pc, #312]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e46:	4b4a      	ldr	r3, [pc, #296]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4a:	f023 0210 	bic.w	r2, r3, #16
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4947      	ldr	r1, [pc, #284]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004e64:	4b42      	ldr	r3, [pc, #264]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	493f      	ldr	r1, [pc, #252]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e82:	4b3b      	ldr	r3, [pc, #236]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	f023 0220 	bic.w	r2, r3, #32
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4938      	ldr	r1, [pc, #224]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ea0:	4b33      	ldr	r3, [pc, #204]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	4930      	ldr	r1, [pc, #192]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	4929      	ldr	r1, [pc, #164]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004edc:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	4921      	ldr	r1, [pc, #132]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004efa:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	491a      	ldr	r1, [pc, #104]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004f18:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	4912      	ldr	r1, [pc, #72]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f36:	4b0e      	ldr	r3, [pc, #56]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	490b      	ldr	r1, [pc, #44]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	4903      	ldr	r1, [pc, #12]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3748      	adds	r7, #72	@ 0x48
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40021000 	.word	0x40021000

08004f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e049      	b.n	800501a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d106      	bne.n	8004fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb fe4a 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 f9d4 	bl	8005360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d001      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e04a      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a21      	ldr	r2, [pc, #132]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d018      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005066:	d013      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00e      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d009      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1a      	ldr	r2, [pc, #104]	@ (80050ec <HAL_TIM_Base_Start_IT+0xc8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d004      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x6c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a19      	ldr	r2, [pc, #100]	@ (80050f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d115      	bne.n	80050bc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	4b17      	ldr	r3, [pc, #92]	@ (80050f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d015      	beq.n	80050ce <HAL_TIM_Base_Start_IT+0xaa>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a8:	d011      	beq.n	80050ce <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	e008      	b.n	80050ce <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e000      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	00010007 	.word	0x00010007

080050f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d020      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01b      	beq.n	800515c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f06f 0202 	mvn.w	r2, #2
 800512c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f8ee 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 8005148:	e005      	b.n	8005156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8e0 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8f1 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b00      	cmp	r3, #0
 8005164:	d020      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0204 	mvn.w	r2, #4
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8c8 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f8ba 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f8cb 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d020      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01b      	beq.n	80051f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0208 	mvn.w	r2, #8
 80051c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2204      	movs	r2, #4
 80051ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8a2 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 80051e0:	e005      	b.n	80051ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f894 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8a5 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0210 	mvn.w	r2, #16
 8005210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2208      	movs	r2, #8
 8005216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f87c 	bl	8005324 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f86e 	bl	8005310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f87f 	bl	8005338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f84c 	bl	80052fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f992 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f98a 	bl	80055c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f83e 	bl	800534c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0220 	mvn.w	r2, #32
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f952 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a42      	ldr	r2, [pc, #264]	@ (800547c <TIM_Base_SetConfig+0x11c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00f      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537e:	d00b      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3f      	ldr	r2, [pc, #252]	@ (8005480 <TIM_Base_SetConfig+0x120>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a3e      	ldr	r2, [pc, #248]	@ (8005484 <TIM_Base_SetConfig+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3d      	ldr	r2, [pc, #244]	@ (8005488 <TIM_Base_SetConfig+0x128>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a33      	ldr	r2, [pc, #204]	@ (800547c <TIM_Base_SetConfig+0x11c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d01b      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b8:	d017      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a30      	ldr	r2, [pc, #192]	@ (8005480 <TIM_Base_SetConfig+0x120>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005484 <TIM_Base_SetConfig+0x124>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00f      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005488 <TIM_Base_SetConfig+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2d      	ldr	r2, [pc, #180]	@ (800548c <TIM_Base_SetConfig+0x12c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005490 <TIM_Base_SetConfig+0x130>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005494 <TIM_Base_SetConfig+0x134>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a16      	ldr	r2, [pc, #88]	@ (800547c <TIM_Base_SetConfig+0x11c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d00f      	beq.n	8005448 <TIM_Base_SetConfig+0xe8>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a17      	ldr	r2, [pc, #92]	@ (8005488 <TIM_Base_SetConfig+0x128>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00b      	beq.n	8005448 <TIM_Base_SetConfig+0xe8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a16      	ldr	r2, [pc, #88]	@ (800548c <TIM_Base_SetConfig+0x12c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d007      	beq.n	8005448 <TIM_Base_SetConfig+0xe8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <TIM_Base_SetConfig+0x130>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_Base_SetConfig+0xe8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a14      	ldr	r2, [pc, #80]	@ (8005494 <TIM_Base_SetConfig+0x134>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f023 0201 	bic.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	611a      	str	r2, [r3, #16]
  }
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40013400 	.word	0x40013400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800

08005498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e063      	b.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d108      	bne.n	80054f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80054ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005522:	d013      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a12      	ldr	r2, [pc, #72]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a13      	ldr	r2, [pc, #76]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d10c      	bne.n	8005566 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40014000 	.word	0x40014000

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e040      	b.n	8005668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fb42 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2224      	movs	r2, #36	@ 0x24
 8005600:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fd7e 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fba7 	bl	8005d74 <UART_SetConfig>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e01b      	b.n	8005668 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800563e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800564e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fdfd 	bl	8006260 <UART_CheckIdleState>
 8005666:	4603      	mov	r3, r0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005682:	2b20      	cmp	r3, #32
 8005684:	d165      	bne.n	8005752 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_UART_Transmit_DMA+0x22>
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e05e      	b.n	8005754 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2221      	movs	r2, #33	@ 0x21
 80056b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d027      	beq.n	8005712 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c6:	4a25      	ldr	r2, [pc, #148]	@ (800575c <HAL_UART_Transmit_DMA+0xec>)
 80056c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	4a24      	ldr	r2, [pc, #144]	@ (8005760 <HAL_UART_Transmit_DMA+0xf0>)
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	4a23      	ldr	r2, [pc, #140]	@ (8005764 <HAL_UART_Transmit_DMA+0xf4>)
 80056d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056de:	2200      	movs	r2, #0
 80056e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ea:	4619      	mov	r1, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3328      	adds	r3, #40	@ 0x28
 80056f2:	461a      	mov	r2, r3
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	f7fb fe3d 	bl	8001374 <HAL_DMA_Start_IT>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2210      	movs	r2, #16
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e020      	b.n	8005754 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2240      	movs	r2, #64	@ 0x40
 8005718:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	613b      	str	r3, [r7, #16]
   return(result);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800573a:	623a      	str	r2, [r7, #32]
 800573c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	61bb      	str	r3, [r7, #24]
   return(result);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	0800659f 	.word	0x0800659f
 8005760:	08006633 	.word	0x08006633
 8005764:	0800664f 	.word	0x0800664f

08005768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b0ba      	sub	sp, #232	@ 0xe8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800578e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005792:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005796:	4013      	ands	r3, r2
 8005798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800579c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d115      	bne.n	80057d0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 82ab 	beq.w	8005d1c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
      }
      return;
 80057ce:	e2a5      	b.n	8005d1c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8117 	beq.w	8005a08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80057e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80057ea:	4b85      	ldr	r3, [pc, #532]	@ (8005a00 <HAL_UART_IRQHandler+0x298>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 810a 	beq.w	8005a08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <HAL_UART_IRQHandler+0xbc>
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00b      	beq.n	8005824 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2201      	movs	r2, #1
 8005812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581a:	f043 0201 	orr.w	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HAL_UART_IRQHandler+0xec>
 8005830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2202      	movs	r2, #2
 8005842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800584a:	f043 0204 	orr.w	r2, r3, #4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0x11c>
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2204      	movs	r2, #4
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587a:	f043 0202 	orr.w	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d017      	beq.n	80058c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d105      	bne.n	80058a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800589c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2208      	movs	r2, #8
 80058ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058b6:	f043 0208 	orr.w	r2, r3, #8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d012      	beq.n	80058f2 <HAL_UART_IRQHandler+0x18a>
 80058cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00c      	beq.n	80058f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 8211 	beq.w	8005d20 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800590a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800592c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800593e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005942:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005946:	2b00      	cmp	r3, #0
 8005948:	d04f      	beq.n	80059ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fdc3 	bl	80064d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d141      	bne.n	80059e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3308      	adds	r3, #8
 8005964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800598a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800598e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1d9      	bne.n	800595e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d013      	beq.n	80059da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	4a13      	ldr	r2, [pc, #76]	@ (8005a04 <HAL_UART_IRQHandler+0x29c>)
 80059b8:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fb fd75 	bl	80014ae <HAL_DMA_Abort_IT>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d017      	beq.n	80059fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80059d4:	4610      	mov	r0, r2
 80059d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d8:	e00f      	b.n	80059fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9b4 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	e00b      	b.n	80059fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9b0 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e8:	e007      	b.n	80059fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9ac 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80059f8:	e192      	b.n	8005d20 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fa:	bf00      	nop
    return;
 80059fc:	e190      	b.n	8005d20 <HAL_UART_IRQHandler+0x5b8>
 80059fe:	bf00      	nop
 8005a00:	04000120 	.word	0x04000120
 8005a04:	080066cd 	.word	0x080066cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 814b 	bne.w	8005ca8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8144 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a24:	f003 0310 	and.w	r3, r3, #16
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 813d 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2210      	movs	r2, #16
 8005a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	f040 80b5 	bne.w	8005bb0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 8164 	beq.w	8005d24 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a66:	429a      	cmp	r2, r3
 8005a68:	f080 815c 	bcs.w	8005d24 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	f000 8086 	beq.w	8005b8e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ab0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1da      	bne.n	8005a82 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005adc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005af0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005af4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005af8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e1      	bne.n	8005acc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b34:	e841 2300 	strex	r3, r2, [r1]
 8005b38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1e3      	bne.n	8005b08 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b72:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e4      	bne.n	8005b4e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fb fc52 	bl	8001432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f8d7 	bl	8005d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bae:	e0b9      	b.n	8005d24 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80ab 	beq.w	8005d28 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 80a6 	beq.w	8005d28 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e4      	bne.n	8005bdc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	623b      	str	r3, [r7, #32]
   return(result);
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e3      	bne.n	8005c12 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0310 	bic.w	r3, r3, #16
 8005c72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	69b9      	ldr	r1, [r7, #24]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e4      	bne.n	8005c5e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f85b 	bl	8005d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ca6:	e03f      	b.n	8005d28 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x56a>
 8005cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005cc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fd3e 	bl	800674c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cd0:	e02d      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d008      	beq.n	8005cfc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d01c      	beq.n	8005d2c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
    }
    return;
 8005cfa:	e017      	b.n	8005d2c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d012      	beq.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00c      	beq.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fcef 	bl	80066f8 <UART_EndTransmit_IT>
    return;
 8005d1a:	e008      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d1c:	bf00      	nop
 8005d1e:	e006      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005d20:	bf00      	nop
 8005d22:	e004      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d24:	bf00      	nop
 8005d26:	e002      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005d28:	bf00      	nop
 8005d2a:	e000      	b.n	8005d2e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005d2c:	bf00      	nop
  }

}
 8005d2e:	37e8      	adds	r7, #232	@ 0xe8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005da2:	f023 030c 	bic.w	r3, r3, #12
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4aa7      	ldr	r2, [pc, #668]	@ (800608c <UART_SetConfig+0x318>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d120      	bne.n	8005e36 <UART_SetConfig+0xc2>
 8005df4:	4ba6      	ldr	r3, [pc, #664]	@ (8006090 <UART_SetConfig+0x31c>)
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d817      	bhi.n	8005e30 <UART_SetConfig+0xbc>
 8005e00:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <UART_SetConfig+0x94>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e2b 	.word	0x08005e2b
 8005e14:	08005e1f 	.word	0x08005e1f
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e0b5      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e0b2      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e24:	2304      	movs	r3, #4
 8005e26:	77fb      	strb	r3, [r7, #31]
 8005e28:	e0af      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	77fb      	strb	r3, [r7, #31]
 8005e2e:	e0ac      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e30:	2310      	movs	r3, #16
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e0a9      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a96      	ldr	r2, [pc, #600]	@ (8006094 <UART_SetConfig+0x320>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d124      	bne.n	8005e8a <UART_SetConfig+0x116>
 8005e40:	4b93      	ldr	r3, [pc, #588]	@ (8006090 <UART_SetConfig+0x31c>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e4c:	d011      	beq.n	8005e72 <UART_SetConfig+0xfe>
 8005e4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e52:	d817      	bhi.n	8005e84 <UART_SetConfig+0x110>
 8005e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e58:	d011      	beq.n	8005e7e <UART_SetConfig+0x10a>
 8005e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e5e:	d811      	bhi.n	8005e84 <UART_SetConfig+0x110>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <UART_SetConfig+0xf8>
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e68:	d006      	beq.n	8005e78 <UART_SetConfig+0x104>
 8005e6a:	e00b      	b.n	8005e84 <UART_SetConfig+0x110>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e08b      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e72:	2302      	movs	r3, #2
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e088      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e085      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e082      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e84:	2310      	movs	r3, #16
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e07f      	b.n	8005f8a <UART_SetConfig+0x216>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a82      	ldr	r2, [pc, #520]	@ (8006098 <UART_SetConfig+0x324>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d124      	bne.n	8005ede <UART_SetConfig+0x16a>
 8005e94:	4b7e      	ldr	r3, [pc, #504]	@ (8006090 <UART_SetConfig+0x31c>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005e9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005ea0:	d011      	beq.n	8005ec6 <UART_SetConfig+0x152>
 8005ea2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005ea6:	d817      	bhi.n	8005ed8 <UART_SetConfig+0x164>
 8005ea8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005eac:	d011      	beq.n	8005ed2 <UART_SetConfig+0x15e>
 8005eae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005eb2:	d811      	bhi.n	8005ed8 <UART_SetConfig+0x164>
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <UART_SetConfig+0x14c>
 8005eb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ebc:	d006      	beq.n	8005ecc <UART_SetConfig+0x158>
 8005ebe:	e00b      	b.n	8005ed8 <UART_SetConfig+0x164>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e061      	b.n	8005f8a <UART_SetConfig+0x216>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	77fb      	strb	r3, [r7, #31]
 8005eca:	e05e      	b.n	8005f8a <UART_SetConfig+0x216>
 8005ecc:	2304      	movs	r3, #4
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e05b      	b.n	8005f8a <UART_SetConfig+0x216>
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	77fb      	strb	r3, [r7, #31]
 8005ed6:	e058      	b.n	8005f8a <UART_SetConfig+0x216>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	77fb      	strb	r3, [r7, #31]
 8005edc:	e055      	b.n	8005f8a <UART_SetConfig+0x216>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800609c <UART_SetConfig+0x328>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d124      	bne.n	8005f32 <UART_SetConfig+0x1be>
 8005ee8:	4b69      	ldr	r3, [pc, #420]	@ (8006090 <UART_SetConfig+0x31c>)
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005ef0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ef4:	d011      	beq.n	8005f1a <UART_SetConfig+0x1a6>
 8005ef6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005efa:	d817      	bhi.n	8005f2c <UART_SetConfig+0x1b8>
 8005efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f00:	d011      	beq.n	8005f26 <UART_SetConfig+0x1b2>
 8005f02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f06:	d811      	bhi.n	8005f2c <UART_SetConfig+0x1b8>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <UART_SetConfig+0x1a0>
 8005f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f10:	d006      	beq.n	8005f20 <UART_SetConfig+0x1ac>
 8005f12:	e00b      	b.n	8005f2c <UART_SetConfig+0x1b8>
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e037      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e034      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f20:	2304      	movs	r3, #4
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e031      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f26:	2308      	movs	r3, #8
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e02e      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e02b      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5a      	ldr	r2, [pc, #360]	@ (80060a0 <UART_SetConfig+0x32c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d124      	bne.n	8005f86 <UART_SetConfig+0x212>
 8005f3c:	4b54      	ldr	r3, [pc, #336]	@ (8006090 <UART_SetConfig+0x31c>)
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005f44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f48:	d011      	beq.n	8005f6e <UART_SetConfig+0x1fa>
 8005f4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f4e:	d817      	bhi.n	8005f80 <UART_SetConfig+0x20c>
 8005f50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f54:	d011      	beq.n	8005f7a <UART_SetConfig+0x206>
 8005f56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f5a:	d811      	bhi.n	8005f80 <UART_SetConfig+0x20c>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x1f4>
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f64:	d006      	beq.n	8005f74 <UART_SetConfig+0x200>
 8005f66:	e00b      	b.n	8005f80 <UART_SetConfig+0x20c>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e00d      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e00a      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f74:	2304      	movs	r3, #4
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e007      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e004      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f80:	2310      	movs	r3, #16
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e001      	b.n	8005f8a <UART_SetConfig+0x216>
 8005f86:	2310      	movs	r3, #16
 8005f88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f92:	d15b      	bne.n	800604c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005f94:	7ffb      	ldrb	r3, [r7, #31]
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d827      	bhi.n	8005fea <UART_SetConfig+0x276>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x22c>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fe fde4 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	61b8      	str	r0, [r7, #24]
        break;
 8005fca:	e013      	b.n	8005ff4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fe fe02 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	61b8      	str	r0, [r7, #24]
        break;
 8005fd2:	e00f      	b.n	8005ff4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b33      	ldr	r3, [pc, #204]	@ (80060a4 <UART_SetConfig+0x330>)
 8005fd6:	61bb      	str	r3, [r7, #24]
        break;
 8005fd8:	e00c      	b.n	8005ff4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fe fd79 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 8005fde:	61b8      	str	r0, [r7, #24]
        break;
 8005fe0:	e008      	b.n	8005ff4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	61bb      	str	r3, [r7, #24]
        break;
 8005fe8:	e004      	b.n	8005ff4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	77bb      	strb	r3, [r7, #30]
        break;
 8005ff2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8082 	beq.w	8006100 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	005a      	lsls	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b0f      	cmp	r3, #15
 8006016:	d916      	bls.n	8006046 <UART_SetConfig+0x2d2>
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800601e:	d212      	bcs.n	8006046 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	b29b      	uxth	r3, r3
 8006024:	f023 030f 	bic.w	r3, r3, #15
 8006028:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	b29a      	uxth	r2, r3
 8006036:	89fb      	ldrh	r3, [r7, #14]
 8006038:	4313      	orrs	r3, r2
 800603a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	89fa      	ldrh	r2, [r7, #14]
 8006042:	60da      	str	r2, [r3, #12]
 8006044:	e05c      	b.n	8006100 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	77bb      	strb	r3, [r7, #30]
 800604a:	e059      	b.n	8006100 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800604c:	7ffb      	ldrb	r3, [r7, #31]
 800604e:	2b08      	cmp	r3, #8
 8006050:	d835      	bhi.n	80060be <UART_SetConfig+0x34a>
 8006052:	a201      	add	r2, pc, #4	@ (adr r2, 8006058 <UART_SetConfig+0x2e4>)
 8006054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	080060a9 	.word	0x080060a9
 8006064:	080060bf 	.word	0x080060bf
 8006068:	080060af 	.word	0x080060af
 800606c:	080060bf 	.word	0x080060bf
 8006070:	080060bf 	.word	0x080060bf
 8006074:	080060bf 	.word	0x080060bf
 8006078:	080060b7 	.word	0x080060b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe fd88 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006080:	61b8      	str	r0, [r7, #24]
        break;
 8006082:	e021      	b.n	80060c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fe fda6 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e01d      	b.n	80060c8 <UART_SetConfig+0x354>
 800608c:	40013800 	.word	0x40013800
 8006090:	40021000 	.word	0x40021000
 8006094:	40004400 	.word	0x40004400
 8006098:	40004800 	.word	0x40004800
 800609c:	40004c00 	.word	0x40004c00
 80060a0:	40005000 	.word	0x40005000
 80060a4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006118 <UART_SetConfig+0x3a4>)
 80060aa:	61bb      	str	r3, [r7, #24]
        break;
 80060ac:	e00c      	b.n	80060c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ae:	f7fe fd0f 	bl	8004ad0 <HAL_RCC_GetSysClockFreq>
 80060b2:	61b8      	str	r0, [r7, #24]
        break;
 80060b4:	e008      	b.n	80060c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ba:	61bb      	str	r3, [r7, #24]
        break;
 80060bc:	e004      	b.n	80060c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	77bb      	strb	r3, [r7, #30]
        break;
 80060c6:	bf00      	nop
    }

    if (pclk != 0U)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085a      	lsrs	r2, r3, #1
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	441a      	add	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	2b0f      	cmp	r3, #15
 80060e6:	d909      	bls.n	80060fc <UART_SetConfig+0x388>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ee:	d205      	bcs.n	80060fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e001      	b.n	8006100 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800610c:	7fbb      	ldrb	r3, [r7, #30]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	007a1200 	.word	0x007a1200

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621a:	d10a      	bne.n	8006232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b098      	sub	sp, #96	@ 0x60
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006270:	f7fa fef8 	bl	8001064 <HAL_GetTick>
 8006274:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b08      	cmp	r3, #8
 8006282:	d12e      	bne.n	80062e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f88c 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d021      	beq.n	80062e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e062      	b.n	80063a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d149      	bne.n	8006384 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062f8:	2200      	movs	r2, #0
 80062fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f856 	bl	80063b0 <UART_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03c      	beq.n	8006384 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	623b      	str	r3, [r7, #32]
   return(result);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800631e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30
 800632a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e6      	bne.n	800630a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3308      	adds	r3, #8
 8006342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	60fb      	str	r3, [r7, #12]
   return(result);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3308      	adds	r3, #8
 800635a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800635c:	61fa      	str	r2, [r7, #28]
 800635e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	617b      	str	r3, [r7, #20]
   return(result);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e011      	b.n	80063a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3758      	adds	r7, #88	@ 0x58
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	e04f      	b.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d04b      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fa fe4b 	bl	8001064 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e04e      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d037      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b80      	cmp	r3, #128	@ 0x80
 80063f6:	d034      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d031      	beq.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69db      	ldr	r3, [r3, #28]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d110      	bne.n	800642e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f85e 	bl	80064d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2208      	movs	r2, #8
 800641e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e029      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d111      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f844 	bl	80064d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e00f      	b.n	8006482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4013      	ands	r3, r2
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	429a      	cmp	r2, r3
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	429a      	cmp	r2, r3
 800647e:	d0a0      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800648a:	b480      	push	{r7}
 800648c:	b089      	sub	sp, #36	@ 0x24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6979      	ldr	r1, [r7, #20]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	613b      	str	r3, [r7, #16]
   return(result);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e6      	bne.n	8006492 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80064ca:	bf00      	nop
 80064cc:	3724      	adds	r7, #36	@ 0x24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b095      	sub	sp, #84	@ 0x54
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80064fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e6      	bne.n	80064de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006548:	2b01      	cmp	r3, #1
 800654a:	d118      	bne.n	800657e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	60bb      	str	r3, [r7, #8]
   return(result);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f023 0310 	bic.w	r3, r3, #16
 8006560:	647b      	str	r3, [r7, #68]	@ 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656e:	6979      	ldr	r1, [r7, #20]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	e841 2300 	strex	r3, r2, [r1]
 8006576:	613b      	str	r3, [r7, #16]
   return(result);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1e6      	bne.n	800654c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006592:	bf00      	nop
 8006594:	3754      	adds	r7, #84	@ 0x54
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b090      	sub	sp, #64	@ 0x40
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d037      	beq.n	8006624 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	623b      	str	r3, [r7, #32]
   return(result);
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80065de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e5      	bne.n	80065bc <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	617b      	str	r3, [r7, #20]
   return(result);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006622:	e002      	b.n	800662a <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8006624:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006626:	f7fa f955 	bl	80008d4 <HAL_UART_TxCpltCallback>
}
 800662a:	bf00      	nop
 800662c:	3740      	adds	r7, #64	@ 0x40
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fb77 	bl	8005d34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b086      	sub	sp, #24
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006660:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006668:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006674:	2b80      	cmp	r3, #128	@ 0x80
 8006676:	d109      	bne.n	800668c <UART_DMAError+0x3e>
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b21      	cmp	r3, #33	@ 0x21
 800667c:	d106      	bne.n	800668c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f7ff feff 	bl	800648a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006696:	2b40      	cmp	r3, #64	@ 0x40
 8006698:	d109      	bne.n	80066ae <UART_DMAError+0x60>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b22      	cmp	r3, #34	@ 0x22
 800669e:	d106      	bne.n	80066ae <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80066a8:	6978      	ldr	r0, [r7, #20]
 80066aa:	f7ff ff14 	bl	80064d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f7ff fb42 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff fb2c 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	60bb      	str	r3, [r7, #8]
   return(result);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6979      	ldr	r1, [r7, #20]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	613b      	str	r3, [r7, #16]
   return(result);
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e6      	bne.n	8006700 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fa f8c8 	bl	80008d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006744:	bf00      	nop
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <siprintf>:
 8006760:	b40e      	push	{r1, r2, r3}
 8006762:	b510      	push	{r4, lr}
 8006764:	b09d      	sub	sp, #116	@ 0x74
 8006766:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006768:	9002      	str	r0, [sp, #8]
 800676a:	9006      	str	r0, [sp, #24]
 800676c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006770:	480a      	ldr	r0, [pc, #40]	@ (800679c <siprintf+0x3c>)
 8006772:	9107      	str	r1, [sp, #28]
 8006774:	9104      	str	r1, [sp, #16]
 8006776:	490a      	ldr	r1, [pc, #40]	@ (80067a0 <siprintf+0x40>)
 8006778:	f853 2b04 	ldr.w	r2, [r3], #4
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	2400      	movs	r4, #0
 8006780:	a902      	add	r1, sp, #8
 8006782:	6800      	ldr	r0, [r0, #0]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006788:	f000 f994 	bl	8006ab4 <_svfiprintf_r>
 800678c:	9b02      	ldr	r3, [sp, #8]
 800678e:	701c      	strb	r4, [r3, #0]
 8006790:	b01d      	add	sp, #116	@ 0x74
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	b003      	add	sp, #12
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000000c 	.word	0x2000000c
 80067a0:	ffff0208 	.word	0xffff0208

080067a4 <memset>:
 80067a4:	4402      	add	r2, r0
 80067a6:	4603      	mov	r3, r0
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d100      	bne.n	80067ae <memset+0xa>
 80067ac:	4770      	bx	lr
 80067ae:	f803 1b01 	strb.w	r1, [r3], #1
 80067b2:	e7f9      	b.n	80067a8 <memset+0x4>

080067b4 <__errno>:
 80067b4:	4b01      	ldr	r3, [pc, #4]	@ (80067bc <__errno+0x8>)
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	2000000c 	.word	0x2000000c

080067c0 <__libc_init_array>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4d0d      	ldr	r5, [pc, #52]	@ (80067f8 <__libc_init_array+0x38>)
 80067c4:	4c0d      	ldr	r4, [pc, #52]	@ (80067fc <__libc_init_array+0x3c>)
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	2600      	movs	r6, #0
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	d109      	bne.n	80067e4 <__libc_init_array+0x24>
 80067d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006800 <__libc_init_array+0x40>)
 80067d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006804 <__libc_init_array+0x44>)
 80067d4:	f000 fc64 	bl	80070a0 <_init>
 80067d8:	1b64      	subs	r4, r4, r5
 80067da:	10a4      	asrs	r4, r4, #2
 80067dc:	2600      	movs	r6, #0
 80067de:	42a6      	cmp	r6, r4
 80067e0:	d105      	bne.n	80067ee <__libc_init_array+0x2e>
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e8:	4798      	blx	r3
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7ee      	b.n	80067cc <__libc_init_array+0xc>
 80067ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f2:	4798      	blx	r3
 80067f4:	3601      	adds	r6, #1
 80067f6:	e7f2      	b.n	80067de <__libc_init_array+0x1e>
 80067f8:	0800731c 	.word	0x0800731c
 80067fc:	0800731c 	.word	0x0800731c
 8006800:	0800731c 	.word	0x0800731c
 8006804:	08007320 	.word	0x08007320

08006808 <__retarget_lock_acquire_recursive>:
 8006808:	4770      	bx	lr

0800680a <__retarget_lock_release_recursive>:
 800680a:	4770      	bx	lr

0800680c <_free_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	2900      	cmp	r1, #0
 8006812:	d041      	beq.n	8006898 <_free_r+0x8c>
 8006814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006818:	1f0c      	subs	r4, r1, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfb8      	it	lt
 800681e:	18e4      	addlt	r4, r4, r3
 8006820:	f000 f8e0 	bl	80069e4 <__malloc_lock>
 8006824:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <_free_r+0x90>)
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	b933      	cbnz	r3, 8006838 <_free_r+0x2c>
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	6014      	str	r4, [r2, #0]
 800682e:	4628      	mov	r0, r5
 8006830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006834:	f000 b8dc 	b.w	80069f0 <__malloc_unlock>
 8006838:	42a3      	cmp	r3, r4
 800683a:	d908      	bls.n	800684e <_free_r+0x42>
 800683c:	6820      	ldr	r0, [r4, #0]
 800683e:	1821      	adds	r1, r4, r0
 8006840:	428b      	cmp	r3, r1
 8006842:	bf01      	itttt	eq
 8006844:	6819      	ldreq	r1, [r3, #0]
 8006846:	685b      	ldreq	r3, [r3, #4]
 8006848:	1809      	addeq	r1, r1, r0
 800684a:	6021      	streq	r1, [r4, #0]
 800684c:	e7ed      	b.n	800682a <_free_r+0x1e>
 800684e:	461a      	mov	r2, r3
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	b10b      	cbz	r3, 8006858 <_free_r+0x4c>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d9fa      	bls.n	800684e <_free_r+0x42>
 8006858:	6811      	ldr	r1, [r2, #0]
 800685a:	1850      	adds	r0, r2, r1
 800685c:	42a0      	cmp	r0, r4
 800685e:	d10b      	bne.n	8006878 <_free_r+0x6c>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	4401      	add	r1, r0
 8006864:	1850      	adds	r0, r2, r1
 8006866:	4283      	cmp	r3, r0
 8006868:	6011      	str	r1, [r2, #0]
 800686a:	d1e0      	bne.n	800682e <_free_r+0x22>
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	6053      	str	r3, [r2, #4]
 8006872:	4408      	add	r0, r1
 8006874:	6010      	str	r0, [r2, #0]
 8006876:	e7da      	b.n	800682e <_free_r+0x22>
 8006878:	d902      	bls.n	8006880 <_free_r+0x74>
 800687a:	230c      	movs	r3, #12
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	e7d6      	b.n	800682e <_free_r+0x22>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	1821      	adds	r1, r4, r0
 8006884:	428b      	cmp	r3, r1
 8006886:	bf04      	itt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	6063      	str	r3, [r4, #4]
 800688e:	bf04      	itt	eq
 8006890:	1809      	addeq	r1, r1, r0
 8006892:	6021      	streq	r1, [r4, #0]
 8006894:	6054      	str	r4, [r2, #4]
 8006896:	e7ca      	b.n	800682e <_free_r+0x22>
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	bf00      	nop
 800689c:	20000818 	.word	0x20000818

080068a0 <sbrk_aligned>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4e0f      	ldr	r6, [pc, #60]	@ (80068e0 <sbrk_aligned+0x40>)
 80068a4:	460c      	mov	r4, r1
 80068a6:	6831      	ldr	r1, [r6, #0]
 80068a8:	4605      	mov	r5, r0
 80068aa:	b911      	cbnz	r1, 80068b2 <sbrk_aligned+0x12>
 80068ac:	f000 fba4 	bl	8006ff8 <_sbrk_r>
 80068b0:	6030      	str	r0, [r6, #0]
 80068b2:	4621      	mov	r1, r4
 80068b4:	4628      	mov	r0, r5
 80068b6:	f000 fb9f 	bl	8006ff8 <_sbrk_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d103      	bne.n	80068c6 <sbrk_aligned+0x26>
 80068be:	f04f 34ff 	mov.w	r4, #4294967295
 80068c2:	4620      	mov	r0, r4
 80068c4:	bd70      	pop	{r4, r5, r6, pc}
 80068c6:	1cc4      	adds	r4, r0, #3
 80068c8:	f024 0403 	bic.w	r4, r4, #3
 80068cc:	42a0      	cmp	r0, r4
 80068ce:	d0f8      	beq.n	80068c2 <sbrk_aligned+0x22>
 80068d0:	1a21      	subs	r1, r4, r0
 80068d2:	4628      	mov	r0, r5
 80068d4:	f000 fb90 	bl	8006ff8 <_sbrk_r>
 80068d8:	3001      	adds	r0, #1
 80068da:	d1f2      	bne.n	80068c2 <sbrk_aligned+0x22>
 80068dc:	e7ef      	b.n	80068be <sbrk_aligned+0x1e>
 80068de:	bf00      	nop
 80068e0:	20000814 	.word	0x20000814

080068e4 <_malloc_r>:
 80068e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e8:	1ccd      	adds	r5, r1, #3
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	4606      	mov	r6, r0
 80068fa:	db01      	blt.n	8006900 <_malloc_r+0x1c>
 80068fc:	42a9      	cmp	r1, r5
 80068fe:	d904      	bls.n	800690a <_malloc_r+0x26>
 8006900:	230c      	movs	r3, #12
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	2000      	movs	r0, #0
 8006906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069e0 <_malloc_r+0xfc>
 800690e:	f000 f869 	bl	80069e4 <__malloc_lock>
 8006912:	f8d8 3000 	ldr.w	r3, [r8]
 8006916:	461c      	mov	r4, r3
 8006918:	bb44      	cbnz	r4, 800696c <_malloc_r+0x88>
 800691a:	4629      	mov	r1, r5
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff ffbf 	bl	80068a0 <sbrk_aligned>
 8006922:	1c43      	adds	r3, r0, #1
 8006924:	4604      	mov	r4, r0
 8006926:	d158      	bne.n	80069da <_malloc_r+0xf6>
 8006928:	f8d8 4000 	ldr.w	r4, [r8]
 800692c:	4627      	mov	r7, r4
 800692e:	2f00      	cmp	r7, #0
 8006930:	d143      	bne.n	80069ba <_malloc_r+0xd6>
 8006932:	2c00      	cmp	r4, #0
 8006934:	d04b      	beq.n	80069ce <_malloc_r+0xea>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	4639      	mov	r1, r7
 800693a:	4630      	mov	r0, r6
 800693c:	eb04 0903 	add.w	r9, r4, r3
 8006940:	f000 fb5a 	bl	8006ff8 <_sbrk_r>
 8006944:	4581      	cmp	r9, r0
 8006946:	d142      	bne.n	80069ce <_malloc_r+0xea>
 8006948:	6821      	ldr	r1, [r4, #0]
 800694a:	1a6d      	subs	r5, r5, r1
 800694c:	4629      	mov	r1, r5
 800694e:	4630      	mov	r0, r6
 8006950:	f7ff ffa6 	bl	80068a0 <sbrk_aligned>
 8006954:	3001      	adds	r0, #1
 8006956:	d03a      	beq.n	80069ce <_malloc_r+0xea>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	442b      	add	r3, r5
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	f8d8 3000 	ldr.w	r3, [r8]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	bb62      	cbnz	r2, 80069c0 <_malloc_r+0xdc>
 8006966:	f8c8 7000 	str.w	r7, [r8]
 800696a:	e00f      	b.n	800698c <_malloc_r+0xa8>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	1b52      	subs	r2, r2, r5
 8006970:	d420      	bmi.n	80069b4 <_malloc_r+0xd0>
 8006972:	2a0b      	cmp	r2, #11
 8006974:	d917      	bls.n	80069a6 <_malloc_r+0xc2>
 8006976:	1961      	adds	r1, r4, r5
 8006978:	42a3      	cmp	r3, r4
 800697a:	6025      	str	r5, [r4, #0]
 800697c:	bf18      	it	ne
 800697e:	6059      	strne	r1, [r3, #4]
 8006980:	6863      	ldr	r3, [r4, #4]
 8006982:	bf08      	it	eq
 8006984:	f8c8 1000 	streq.w	r1, [r8]
 8006988:	5162      	str	r2, [r4, r5]
 800698a:	604b      	str	r3, [r1, #4]
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f82f 	bl	80069f0 <__malloc_unlock>
 8006992:	f104 000b 	add.w	r0, r4, #11
 8006996:	1d23      	adds	r3, r4, #4
 8006998:	f020 0007 	bic.w	r0, r0, #7
 800699c:	1ac2      	subs	r2, r0, r3
 800699e:	bf1c      	itt	ne
 80069a0:	1a1b      	subne	r3, r3, r0
 80069a2:	50a3      	strne	r3, [r4, r2]
 80069a4:	e7af      	b.n	8006906 <_malloc_r+0x22>
 80069a6:	6862      	ldr	r2, [r4, #4]
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	bf0c      	ite	eq
 80069ac:	f8c8 2000 	streq.w	r2, [r8]
 80069b0:	605a      	strne	r2, [r3, #4]
 80069b2:	e7eb      	b.n	800698c <_malloc_r+0xa8>
 80069b4:	4623      	mov	r3, r4
 80069b6:	6864      	ldr	r4, [r4, #4]
 80069b8:	e7ae      	b.n	8006918 <_malloc_r+0x34>
 80069ba:	463c      	mov	r4, r7
 80069bc:	687f      	ldr	r7, [r7, #4]
 80069be:	e7b6      	b.n	800692e <_malloc_r+0x4a>
 80069c0:	461a      	mov	r2, r3
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d1fb      	bne.n	80069c0 <_malloc_r+0xdc>
 80069c8:	2300      	movs	r3, #0
 80069ca:	6053      	str	r3, [r2, #4]
 80069cc:	e7de      	b.n	800698c <_malloc_r+0xa8>
 80069ce:	230c      	movs	r3, #12
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	4630      	mov	r0, r6
 80069d4:	f000 f80c 	bl	80069f0 <__malloc_unlock>
 80069d8:	e794      	b.n	8006904 <_malloc_r+0x20>
 80069da:	6005      	str	r5, [r0, #0]
 80069dc:	e7d6      	b.n	800698c <_malloc_r+0xa8>
 80069de:	bf00      	nop
 80069e0:	20000818 	.word	0x20000818

080069e4 <__malloc_lock>:
 80069e4:	4801      	ldr	r0, [pc, #4]	@ (80069ec <__malloc_lock+0x8>)
 80069e6:	f7ff bf0f 	b.w	8006808 <__retarget_lock_acquire_recursive>
 80069ea:	bf00      	nop
 80069ec:	20000810 	.word	0x20000810

080069f0 <__malloc_unlock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	@ (80069f8 <__malloc_unlock+0x8>)
 80069f2:	f7ff bf0a 	b.w	800680a <__retarget_lock_release_recursive>
 80069f6:	bf00      	nop
 80069f8:	20000810 	.word	0x20000810

080069fc <__ssputs_r>:
 80069fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a00:	688e      	ldr	r6, [r1, #8]
 8006a02:	461f      	mov	r7, r3
 8006a04:	42be      	cmp	r6, r7
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	4682      	mov	sl, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4690      	mov	r8, r2
 8006a0e:	d82d      	bhi.n	8006a6c <__ssputs_r+0x70>
 8006a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a18:	d026      	beq.n	8006a68 <__ssputs_r+0x6c>
 8006a1a:	6965      	ldr	r5, [r4, #20]
 8006a1c:	6909      	ldr	r1, [r1, #16]
 8006a1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a22:	eba3 0901 	sub.w	r9, r3, r1
 8006a26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a2a:	1c7b      	adds	r3, r7, #1
 8006a2c:	444b      	add	r3, r9
 8006a2e:	106d      	asrs	r5, r5, #1
 8006a30:	429d      	cmp	r5, r3
 8006a32:	bf38      	it	cc
 8006a34:	461d      	movcc	r5, r3
 8006a36:	0553      	lsls	r3, r2, #21
 8006a38:	d527      	bpl.n	8006a8a <__ssputs_r+0x8e>
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7ff ff52 	bl	80068e4 <_malloc_r>
 8006a40:	4606      	mov	r6, r0
 8006a42:	b360      	cbz	r0, 8006a9e <__ssputs_r+0xa2>
 8006a44:	6921      	ldr	r1, [r4, #16]
 8006a46:	464a      	mov	r2, r9
 8006a48:	f000 fae6 	bl	8007018 <memcpy>
 8006a4c:	89a3      	ldrh	r3, [r4, #12]
 8006a4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	6126      	str	r6, [r4, #16]
 8006a5a:	6165      	str	r5, [r4, #20]
 8006a5c:	444e      	add	r6, r9
 8006a5e:	eba5 0509 	sub.w	r5, r5, r9
 8006a62:	6026      	str	r6, [r4, #0]
 8006a64:	60a5      	str	r5, [r4, #8]
 8006a66:	463e      	mov	r6, r7
 8006a68:	42be      	cmp	r6, r7
 8006a6a:	d900      	bls.n	8006a6e <__ssputs_r+0x72>
 8006a6c:	463e      	mov	r6, r7
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	4632      	mov	r2, r6
 8006a72:	4641      	mov	r1, r8
 8006a74:	f000 faa6 	bl	8006fc4 <memmove>
 8006a78:	68a3      	ldr	r3, [r4, #8]
 8006a7a:	1b9b      	subs	r3, r3, r6
 8006a7c:	60a3      	str	r3, [r4, #8]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	4433      	add	r3, r6
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	2000      	movs	r0, #0
 8006a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	f000 fad2 	bl	8007034 <_realloc_r>
 8006a90:	4606      	mov	r6, r0
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d1e0      	bne.n	8006a58 <__ssputs_r+0x5c>
 8006a96:	6921      	ldr	r1, [r4, #16]
 8006a98:	4650      	mov	r0, sl
 8006a9a:	f7ff feb7 	bl	800680c <_free_r>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	f8ca 3000 	str.w	r3, [sl]
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e7e9      	b.n	8006a86 <__ssputs_r+0x8a>
	...

08006ab4 <_svfiprintf_r>:
 8006ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	4698      	mov	r8, r3
 8006aba:	898b      	ldrh	r3, [r1, #12]
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	b09d      	sub	sp, #116	@ 0x74
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	d510      	bpl.n	8006aea <_svfiprintf_r+0x36>
 8006ac8:	690b      	ldr	r3, [r1, #16]
 8006aca:	b973      	cbnz	r3, 8006aea <_svfiprintf_r+0x36>
 8006acc:	2140      	movs	r1, #64	@ 0x40
 8006ace:	f7ff ff09 	bl	80068e4 <_malloc_r>
 8006ad2:	6028      	str	r0, [r5, #0]
 8006ad4:	6128      	str	r0, [r5, #16]
 8006ad6:	b930      	cbnz	r0, 8006ae6 <_svfiprintf_r+0x32>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	b01d      	add	sp, #116	@ 0x74
 8006ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae6:	2340      	movs	r3, #64	@ 0x40
 8006ae8:	616b      	str	r3, [r5, #20]
 8006aea:	2300      	movs	r3, #0
 8006aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aee:	2320      	movs	r3, #32
 8006af0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af8:	2330      	movs	r3, #48	@ 0x30
 8006afa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c98 <_svfiprintf_r+0x1e4>
 8006afe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b02:	f04f 0901 	mov.w	r9, #1
 8006b06:	4623      	mov	r3, r4
 8006b08:	469a      	mov	sl, r3
 8006b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0e:	b10a      	cbz	r2, 8006b14 <_svfiprintf_r+0x60>
 8006b10:	2a25      	cmp	r2, #37	@ 0x25
 8006b12:	d1f9      	bne.n	8006b08 <_svfiprintf_r+0x54>
 8006b14:	ebba 0b04 	subs.w	fp, sl, r4
 8006b18:	d00b      	beq.n	8006b32 <_svfiprintf_r+0x7e>
 8006b1a:	465b      	mov	r3, fp
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7ff ff6b 	bl	80069fc <__ssputs_r>
 8006b26:	3001      	adds	r0, #1
 8006b28:	f000 80a7 	beq.w	8006c7a <_svfiprintf_r+0x1c6>
 8006b2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b2e:	445a      	add	r2, fp
 8006b30:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b32:	f89a 3000 	ldrb.w	r3, [sl]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 809f 	beq.w	8006c7a <_svfiprintf_r+0x1c6>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b46:	f10a 0a01 	add.w	sl, sl, #1
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b52:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b54:	4654      	mov	r4, sl
 8006b56:	2205      	movs	r2, #5
 8006b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5c:	484e      	ldr	r0, [pc, #312]	@ (8006c98 <_svfiprintf_r+0x1e4>)
 8006b5e:	f7f9 fb3f 	bl	80001e0 <memchr>
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	b9d8      	cbnz	r0, 8006b9e <_svfiprintf_r+0xea>
 8006b66:	06d0      	lsls	r0, r2, #27
 8006b68:	bf44      	itt	mi
 8006b6a:	2320      	movmi	r3, #32
 8006b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b70:	0711      	lsls	r1, r2, #28
 8006b72:	bf44      	itt	mi
 8006b74:	232b      	movmi	r3, #43	@ 0x2b
 8006b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b80:	d015      	beq.n	8006bae <_svfiprintf_r+0xfa>
 8006b82:	9a07      	ldr	r2, [sp, #28]
 8006b84:	4654      	mov	r4, sl
 8006b86:	2000      	movs	r0, #0
 8006b88:	f04f 0c0a 	mov.w	ip, #10
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b92:	3b30      	subs	r3, #48	@ 0x30
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	d94b      	bls.n	8006c30 <_svfiprintf_r+0x17c>
 8006b98:	b1b0      	cbz	r0, 8006bc8 <_svfiprintf_r+0x114>
 8006b9a:	9207      	str	r2, [sp, #28]
 8006b9c:	e014      	b.n	8006bc8 <_svfiprintf_r+0x114>
 8006b9e:	eba0 0308 	sub.w	r3, r0, r8
 8006ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	46a2      	mov	sl, r4
 8006bac:	e7d2      	b.n	8006b54 <_svfiprintf_r+0xa0>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	9103      	str	r1, [sp, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfbb      	ittet	lt
 8006bba:	425b      	neglt	r3, r3
 8006bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc0:	9307      	strge	r3, [sp, #28]
 8006bc2:	9307      	strlt	r3, [sp, #28]
 8006bc4:	bfb8      	it	lt
 8006bc6:	9204      	strlt	r2, [sp, #16]
 8006bc8:	7823      	ldrb	r3, [r4, #0]
 8006bca:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bcc:	d10a      	bne.n	8006be4 <_svfiprintf_r+0x130>
 8006bce:	7863      	ldrb	r3, [r4, #1]
 8006bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd2:	d132      	bne.n	8006c3a <_svfiprintf_r+0x186>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	1d1a      	adds	r2, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	9203      	str	r2, [sp, #12]
 8006bdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006be0:	3402      	adds	r4, #2
 8006be2:	9305      	str	r3, [sp, #20]
 8006be4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ca8 <_svfiprintf_r+0x1f4>
 8006be8:	7821      	ldrb	r1, [r4, #0]
 8006bea:	2203      	movs	r2, #3
 8006bec:	4650      	mov	r0, sl
 8006bee:	f7f9 faf7 	bl	80001e0 <memchr>
 8006bf2:	b138      	cbz	r0, 8006c04 <_svfiprintf_r+0x150>
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	eba0 000a 	sub.w	r0, r0, sl
 8006bfa:	2240      	movs	r2, #64	@ 0x40
 8006bfc:	4082      	lsls	r2, r0
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	3401      	adds	r4, #1
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c08:	4824      	ldr	r0, [pc, #144]	@ (8006c9c <_svfiprintf_r+0x1e8>)
 8006c0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c0e:	2206      	movs	r2, #6
 8006c10:	f7f9 fae6 	bl	80001e0 <memchr>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d036      	beq.n	8006c86 <_svfiprintf_r+0x1d2>
 8006c18:	4b21      	ldr	r3, [pc, #132]	@ (8006ca0 <_svfiprintf_r+0x1ec>)
 8006c1a:	bb1b      	cbnz	r3, 8006c64 <_svfiprintf_r+0x1b0>
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	3307      	adds	r3, #7
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	3308      	adds	r3, #8
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2a:	4433      	add	r3, r6
 8006c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c2e:	e76a      	b.n	8006b06 <_svfiprintf_r+0x52>
 8006c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c34:	460c      	mov	r4, r1
 8006c36:	2001      	movs	r0, #1
 8006c38:	e7a8      	b.n	8006b8c <_svfiprintf_r+0xd8>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	9305      	str	r3, [sp, #20]
 8006c40:	4619      	mov	r1, r3
 8006c42:	f04f 0c0a 	mov.w	ip, #10
 8006c46:	4620      	mov	r0, r4
 8006c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4c:	3a30      	subs	r2, #48	@ 0x30
 8006c4e:	2a09      	cmp	r2, #9
 8006c50:	d903      	bls.n	8006c5a <_svfiprintf_r+0x1a6>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0c6      	beq.n	8006be4 <_svfiprintf_r+0x130>
 8006c56:	9105      	str	r1, [sp, #20]
 8006c58:	e7c4      	b.n	8006be4 <_svfiprintf_r+0x130>
 8006c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c5e:	4604      	mov	r4, r0
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7f0      	b.n	8006c46 <_svfiprintf_r+0x192>
 8006c64:	ab03      	add	r3, sp, #12
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <_svfiprintf_r+0x1f0>)
 8006c6c:	a904      	add	r1, sp, #16
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f3af 8000 	nop.w
 8006c74:	1c42      	adds	r2, r0, #1
 8006c76:	4606      	mov	r6, r0
 8006c78:	d1d6      	bne.n	8006c28 <_svfiprintf_r+0x174>
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	065b      	lsls	r3, r3, #25
 8006c7e:	f53f af2d 	bmi.w	8006adc <_svfiprintf_r+0x28>
 8006c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c84:	e72c      	b.n	8006ae0 <_svfiprintf_r+0x2c>
 8006c86:	ab03      	add	r3, sp, #12
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462a      	mov	r2, r5
 8006c8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ca4 <_svfiprintf_r+0x1f0>)
 8006c8e:	a904      	add	r1, sp, #16
 8006c90:	4638      	mov	r0, r7
 8006c92:	f000 f879 	bl	8006d88 <_printf_i>
 8006c96:	e7ed      	b.n	8006c74 <_svfiprintf_r+0x1c0>
 8006c98:	080072e0 	.word	0x080072e0
 8006c9c:	080072ea 	.word	0x080072ea
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	080069fd 	.word	0x080069fd
 8006ca8:	080072e6 	.word	0x080072e6

08006cac <_printf_common>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	4698      	mov	r8, r3
 8006cb4:	688a      	ldr	r2, [r1, #8]
 8006cb6:	690b      	ldr	r3, [r1, #16]
 8006cb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	bfb8      	it	lt
 8006cc0:	4613      	movlt	r3, r2
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cc8:	4607      	mov	r7, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	b10a      	cbz	r2, 8006cd2 <_printf_common+0x26>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	0699      	lsls	r1, r3, #26
 8006cd6:	bf42      	ittt	mi
 8006cd8:	6833      	ldrmi	r3, [r6, #0]
 8006cda:	3302      	addmi	r3, #2
 8006cdc:	6033      	strmi	r3, [r6, #0]
 8006cde:	6825      	ldr	r5, [r4, #0]
 8006ce0:	f015 0506 	ands.w	r5, r5, #6
 8006ce4:	d106      	bne.n	8006cf4 <_printf_common+0x48>
 8006ce6:	f104 0a19 	add.w	sl, r4, #25
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	6832      	ldr	r2, [r6, #0]
 8006cee:	1a9b      	subs	r3, r3, r2
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dc26      	bgt.n	8006d42 <_printf_common+0x96>
 8006cf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cf8:	6822      	ldr	r2, [r4, #0]
 8006cfa:	3b00      	subs	r3, #0
 8006cfc:	bf18      	it	ne
 8006cfe:	2301      	movne	r3, #1
 8006d00:	0692      	lsls	r2, r2, #26
 8006d02:	d42b      	bmi.n	8006d5c <_printf_common+0xb0>
 8006d04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d08:	4641      	mov	r1, r8
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c8      	blx	r9
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d01e      	beq.n	8006d50 <_printf_common+0xa4>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	6922      	ldr	r2, [r4, #16]
 8006d16:	f003 0306 	and.w	r3, r3, #6
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	bf02      	ittt	eq
 8006d1e:	68e5      	ldreq	r5, [r4, #12]
 8006d20:	6833      	ldreq	r3, [r6, #0]
 8006d22:	1aed      	subeq	r5, r5, r3
 8006d24:	68a3      	ldr	r3, [r4, #8]
 8006d26:	bf0c      	ite	eq
 8006d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d2c:	2500      	movne	r5, #0
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bfc4      	itt	gt
 8006d32:	1a9b      	subgt	r3, r3, r2
 8006d34:	18ed      	addgt	r5, r5, r3
 8006d36:	2600      	movs	r6, #0
 8006d38:	341a      	adds	r4, #26
 8006d3a:	42b5      	cmp	r5, r6
 8006d3c:	d11a      	bne.n	8006d74 <_printf_common+0xc8>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e008      	b.n	8006d54 <_printf_common+0xa8>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4652      	mov	r2, sl
 8006d46:	4641      	mov	r1, r8
 8006d48:	4638      	mov	r0, r7
 8006d4a:	47c8      	blx	r9
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d103      	bne.n	8006d58 <_printf_common+0xac>
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
 8006d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7c6      	b.n	8006cea <_printf_common+0x3e>
 8006d5c:	18e1      	adds	r1, r4, r3
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	2030      	movs	r0, #48	@ 0x30
 8006d62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d66:	4422      	add	r2, r4
 8006d68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d70:	3302      	adds	r3, #2
 8006d72:	e7c7      	b.n	8006d04 <_printf_common+0x58>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4622      	mov	r2, r4
 8006d78:	4641      	mov	r1, r8
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	47c8      	blx	r9
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0e6      	beq.n	8006d50 <_printf_common+0xa4>
 8006d82:	3601      	adds	r6, #1
 8006d84:	e7d9      	b.n	8006d3a <_printf_common+0x8e>
	...

08006d88 <_printf_i>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	7e0f      	ldrb	r7, [r1, #24]
 8006d8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d90:	2f78      	cmp	r7, #120	@ 0x78
 8006d92:	4691      	mov	r9, r2
 8006d94:	4680      	mov	r8, r0
 8006d96:	460c      	mov	r4, r1
 8006d98:	469a      	mov	sl, r3
 8006d9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d9e:	d807      	bhi.n	8006db0 <_printf_i+0x28>
 8006da0:	2f62      	cmp	r7, #98	@ 0x62
 8006da2:	d80a      	bhi.n	8006dba <_printf_i+0x32>
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	f000 80d1 	beq.w	8006f4c <_printf_i+0x1c4>
 8006daa:	2f58      	cmp	r7, #88	@ 0x58
 8006dac:	f000 80b8 	beq.w	8006f20 <_printf_i+0x198>
 8006db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006db4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006db8:	e03a      	b.n	8006e30 <_printf_i+0xa8>
 8006dba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dbe:	2b15      	cmp	r3, #21
 8006dc0:	d8f6      	bhi.n	8006db0 <_printf_i+0x28>
 8006dc2:	a101      	add	r1, pc, #4	@ (adr r1, 8006dc8 <_printf_i+0x40>)
 8006dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e35 	.word	0x08006e35
 8006dd0:	08006db1 	.word	0x08006db1
 8006dd4:	08006db1 	.word	0x08006db1
 8006dd8:	08006db1 	.word	0x08006db1
 8006ddc:	08006db1 	.word	0x08006db1
 8006de0:	08006e35 	.word	0x08006e35
 8006de4:	08006db1 	.word	0x08006db1
 8006de8:	08006db1 	.word	0x08006db1
 8006dec:	08006db1 	.word	0x08006db1
 8006df0:	08006db1 	.word	0x08006db1
 8006df4:	08006f33 	.word	0x08006f33
 8006df8:	08006e5f 	.word	0x08006e5f
 8006dfc:	08006eed 	.word	0x08006eed
 8006e00:	08006db1 	.word	0x08006db1
 8006e04:	08006db1 	.word	0x08006db1
 8006e08:	08006f55 	.word	0x08006f55
 8006e0c:	08006db1 	.word	0x08006db1
 8006e10:	08006e5f 	.word	0x08006e5f
 8006e14:	08006db1 	.word	0x08006db1
 8006e18:	08006db1 	.word	0x08006db1
 8006e1c:	08006ef5 	.word	0x08006ef5
 8006e20:	6833      	ldr	r3, [r6, #0]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6032      	str	r2, [r6, #0]
 8006e28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e30:	2301      	movs	r3, #1
 8006e32:	e09c      	b.n	8006f6e <_printf_i+0x1e6>
 8006e34:	6833      	ldr	r3, [r6, #0]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1d19      	adds	r1, r3, #4
 8006e3a:	6031      	str	r1, [r6, #0]
 8006e3c:	0606      	lsls	r6, r0, #24
 8006e3e:	d501      	bpl.n	8006e44 <_printf_i+0xbc>
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	e003      	b.n	8006e4c <_printf_i+0xc4>
 8006e44:	0645      	lsls	r5, r0, #25
 8006e46:	d5fb      	bpl.n	8006e40 <_printf_i+0xb8>
 8006e48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e4c:	2d00      	cmp	r5, #0
 8006e4e:	da03      	bge.n	8006e58 <_printf_i+0xd0>
 8006e50:	232d      	movs	r3, #45	@ 0x2d
 8006e52:	426d      	negs	r5, r5
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e58:	4858      	ldr	r0, [pc, #352]	@ (8006fbc <_printf_i+0x234>)
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	e011      	b.n	8006e82 <_printf_i+0xfa>
 8006e5e:	6821      	ldr	r1, [r4, #0]
 8006e60:	6833      	ldr	r3, [r6, #0]
 8006e62:	0608      	lsls	r0, r1, #24
 8006e64:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e68:	d402      	bmi.n	8006e70 <_printf_i+0xe8>
 8006e6a:	0649      	lsls	r1, r1, #25
 8006e6c:	bf48      	it	mi
 8006e6e:	b2ad      	uxthmi	r5, r5
 8006e70:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e72:	4852      	ldr	r0, [pc, #328]	@ (8006fbc <_printf_i+0x234>)
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	bf14      	ite	ne
 8006e78:	230a      	movne	r3, #10
 8006e7a:	2308      	moveq	r3, #8
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e82:	6866      	ldr	r6, [r4, #4]
 8006e84:	60a6      	str	r6, [r4, #8]
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	db05      	blt.n	8006e96 <_printf_i+0x10e>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	432e      	orrs	r6, r5
 8006e8e:	f021 0104 	bic.w	r1, r1, #4
 8006e92:	6021      	str	r1, [r4, #0]
 8006e94:	d04b      	beq.n	8006f2e <_printf_i+0x1a6>
 8006e96:	4616      	mov	r6, r2
 8006e98:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e9c:	fb03 5711 	mls	r7, r3, r1, r5
 8006ea0:	5dc7      	ldrb	r7, [r0, r7]
 8006ea2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ea6:	462f      	mov	r7, r5
 8006ea8:	42bb      	cmp	r3, r7
 8006eaa:	460d      	mov	r5, r1
 8006eac:	d9f4      	bls.n	8006e98 <_printf_i+0x110>
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d10b      	bne.n	8006eca <_printf_i+0x142>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	07df      	lsls	r7, r3, #31
 8006eb6:	d508      	bpl.n	8006eca <_printf_i+0x142>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	6861      	ldr	r1, [r4, #4]
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	bfde      	ittt	le
 8006ec0:	2330      	movle	r3, #48	@ 0x30
 8006ec2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ec6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eca:	1b92      	subs	r2, r2, r6
 8006ecc:	6122      	str	r2, [r4, #16]
 8006ece:	f8cd a000 	str.w	sl, [sp]
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	aa03      	add	r2, sp, #12
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4640      	mov	r0, r8
 8006eda:	f7ff fee7 	bl	8006cac <_printf_common>
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d14a      	bne.n	8006f78 <_printf_i+0x1f0>
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	b004      	add	sp, #16
 8006ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	f043 0320 	orr.w	r3, r3, #32
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	4832      	ldr	r0, [pc, #200]	@ (8006fc0 <_printf_i+0x238>)
 8006ef6:	2778      	movs	r7, #120	@ 0x78
 8006ef8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	6831      	ldr	r1, [r6, #0]
 8006f00:	061f      	lsls	r7, r3, #24
 8006f02:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f06:	d402      	bmi.n	8006f0e <_printf_i+0x186>
 8006f08:	065f      	lsls	r7, r3, #25
 8006f0a:	bf48      	it	mi
 8006f0c:	b2ad      	uxthmi	r5, r5
 8006f0e:	6031      	str	r1, [r6, #0]
 8006f10:	07d9      	lsls	r1, r3, #31
 8006f12:	bf44      	itt	mi
 8006f14:	f043 0320 	orrmi.w	r3, r3, #32
 8006f18:	6023      	strmi	r3, [r4, #0]
 8006f1a:	b11d      	cbz	r5, 8006f24 <_printf_i+0x19c>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	e7ad      	b.n	8006e7c <_printf_i+0xf4>
 8006f20:	4826      	ldr	r0, [pc, #152]	@ (8006fbc <_printf_i+0x234>)
 8006f22:	e7e9      	b.n	8006ef8 <_printf_i+0x170>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	f023 0320 	bic.w	r3, r3, #32
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	e7f6      	b.n	8006f1c <_printf_i+0x194>
 8006f2e:	4616      	mov	r6, r2
 8006f30:	e7bd      	b.n	8006eae <_printf_i+0x126>
 8006f32:	6833      	ldr	r3, [r6, #0]
 8006f34:	6825      	ldr	r5, [r4, #0]
 8006f36:	6961      	ldr	r1, [r4, #20]
 8006f38:	1d18      	adds	r0, r3, #4
 8006f3a:	6030      	str	r0, [r6, #0]
 8006f3c:	062e      	lsls	r6, r5, #24
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	d501      	bpl.n	8006f46 <_printf_i+0x1be>
 8006f42:	6019      	str	r1, [r3, #0]
 8006f44:	e002      	b.n	8006f4c <_printf_i+0x1c4>
 8006f46:	0668      	lsls	r0, r5, #25
 8006f48:	d5fb      	bpl.n	8006f42 <_printf_i+0x1ba>
 8006f4a:	8019      	strh	r1, [r3, #0]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	4616      	mov	r6, r2
 8006f52:	e7bc      	b.n	8006ece <_printf_i+0x146>
 8006f54:	6833      	ldr	r3, [r6, #0]
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	6032      	str	r2, [r6, #0]
 8006f5a:	681e      	ldr	r6, [r3, #0]
 8006f5c:	6862      	ldr	r2, [r4, #4]
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7f9 f93d 	bl	80001e0 <memchr>
 8006f66:	b108      	cbz	r0, 8006f6c <_printf_i+0x1e4>
 8006f68:	1b80      	subs	r0, r0, r6
 8006f6a:	6060      	str	r0, [r4, #4]
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	2300      	movs	r3, #0
 8006f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f76:	e7aa      	b.n	8006ece <_printf_i+0x146>
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4640      	mov	r0, r8
 8006f80:	47d0      	blx	sl
 8006f82:	3001      	adds	r0, #1
 8006f84:	d0ad      	beq.n	8006ee2 <_printf_i+0x15a>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	079b      	lsls	r3, r3, #30
 8006f8a:	d413      	bmi.n	8006fb4 <_printf_i+0x22c>
 8006f8c:	68e0      	ldr	r0, [r4, #12]
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	4298      	cmp	r0, r3
 8006f92:	bfb8      	it	lt
 8006f94:	4618      	movlt	r0, r3
 8006f96:	e7a6      	b.n	8006ee6 <_printf_i+0x15e>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	4632      	mov	r2, r6
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	47d0      	blx	sl
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d09d      	beq.n	8006ee2 <_printf_i+0x15a>
 8006fa6:	3501      	adds	r5, #1
 8006fa8:	68e3      	ldr	r3, [r4, #12]
 8006faa:	9903      	ldr	r1, [sp, #12]
 8006fac:	1a5b      	subs	r3, r3, r1
 8006fae:	42ab      	cmp	r3, r5
 8006fb0:	dcf2      	bgt.n	8006f98 <_printf_i+0x210>
 8006fb2:	e7eb      	b.n	8006f8c <_printf_i+0x204>
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	f104 0619 	add.w	r6, r4, #25
 8006fba:	e7f5      	b.n	8006fa8 <_printf_i+0x220>
 8006fbc:	080072f1 	.word	0x080072f1
 8006fc0:	08007302 	.word	0x08007302

08006fc4 <memmove>:
 8006fc4:	4288      	cmp	r0, r1
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	eb01 0402 	add.w	r4, r1, r2
 8006fcc:	d902      	bls.n	8006fd4 <memmove+0x10>
 8006fce:	4284      	cmp	r4, r0
 8006fd0:	4623      	mov	r3, r4
 8006fd2:	d807      	bhi.n	8006fe4 <memmove+0x20>
 8006fd4:	1e43      	subs	r3, r0, #1
 8006fd6:	42a1      	cmp	r1, r4
 8006fd8:	d008      	beq.n	8006fec <memmove+0x28>
 8006fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fe2:	e7f8      	b.n	8006fd6 <memmove+0x12>
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	428a      	cmp	r2, r1
 8006fea:	d100      	bne.n	8006fee <memmove+0x2a>
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ff6:	e7f7      	b.n	8006fe8 <memmove+0x24>

08006ff8 <_sbrk_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d06      	ldr	r5, [pc, #24]	@ (8007014 <_sbrk_r+0x1c>)
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	4604      	mov	r4, r0
 8007000:	4608      	mov	r0, r1
 8007002:	602b      	str	r3, [r5, #0]
 8007004:	f7f9 ff62 	bl	8000ecc <_sbrk>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_sbrk_r+0x1a>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_sbrk_r+0x1a>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	2000080c 	.word	0x2000080c

08007018 <memcpy>:
 8007018:	440a      	add	r2, r1
 800701a:	4291      	cmp	r1, r2
 800701c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007020:	d100      	bne.n	8007024 <memcpy+0xc>
 8007022:	4770      	bx	lr
 8007024:	b510      	push	{r4, lr}
 8007026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800702e:	4291      	cmp	r1, r2
 8007030:	d1f9      	bne.n	8007026 <memcpy+0xe>
 8007032:	bd10      	pop	{r4, pc}

08007034 <_realloc_r>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	4607      	mov	r7, r0
 800703a:	4614      	mov	r4, r2
 800703c:	460d      	mov	r5, r1
 800703e:	b921      	cbnz	r1, 800704a <_realloc_r+0x16>
 8007040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	4611      	mov	r1, r2
 8007046:	f7ff bc4d 	b.w	80068e4 <_malloc_r>
 800704a:	b92a      	cbnz	r2, 8007058 <_realloc_r+0x24>
 800704c:	f7ff fbde 	bl	800680c <_free_r>
 8007050:	4625      	mov	r5, r4
 8007052:	4628      	mov	r0, r5
 8007054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007058:	f000 f81a 	bl	8007090 <_malloc_usable_size_r>
 800705c:	4284      	cmp	r4, r0
 800705e:	4606      	mov	r6, r0
 8007060:	d802      	bhi.n	8007068 <_realloc_r+0x34>
 8007062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007066:	d8f4      	bhi.n	8007052 <_realloc_r+0x1e>
 8007068:	4621      	mov	r1, r4
 800706a:	4638      	mov	r0, r7
 800706c:	f7ff fc3a 	bl	80068e4 <_malloc_r>
 8007070:	4680      	mov	r8, r0
 8007072:	b908      	cbnz	r0, 8007078 <_realloc_r+0x44>
 8007074:	4645      	mov	r5, r8
 8007076:	e7ec      	b.n	8007052 <_realloc_r+0x1e>
 8007078:	42b4      	cmp	r4, r6
 800707a:	4622      	mov	r2, r4
 800707c:	4629      	mov	r1, r5
 800707e:	bf28      	it	cs
 8007080:	4632      	movcs	r2, r6
 8007082:	f7ff ffc9 	bl	8007018 <memcpy>
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff fbbf 	bl	800680c <_free_r>
 800708e:	e7f1      	b.n	8007074 <_realloc_r+0x40>

08007090 <_malloc_usable_size_r>:
 8007090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007094:	1f18      	subs	r0, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfbc      	itt	lt
 800709a:	580b      	ldrlt	r3, [r1, r0]
 800709c:	18c0      	addlt	r0, r0, r3
 800709e:	4770      	bx	lr

080070a0 <_init>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr

080070ac <_fini>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr
